@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under
    terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@using TcNo_Acc_Switcher.State
@using TcNo_Acc_Switcher.State.Interfaces
@using System.ComponentModel
@namespace TcNo_Acc_Switcher.Shared
@inject IWindowSettings WindowSettings;
@inject ISteamSettings SteamSettings;
@inject IAppState AppState;
@implements IDisposable

<style>
    @_markup
</style>

@code
{
    private MarkupString _markup;

    public string GetStylesheetMarkupString()
    {
        var style = AppState.Stylesheet.StylesheetCss;

        if (OperatingSystem.IsWindows() && AppState.Stylesheet.WindowsAccent)
        {
            var start = style.IndexOf("--accent:", StringComparison.Ordinal);
            var end = style.IndexOf(";", start, StringComparison.Ordinal) - start;
            style = style.Replace(style.Substring(start, end), "");

            var (h, s, l) = AppState.Stylesheet.WindowsAccentColorHsl;
            var (r, g, b) = AppState.Stylesheet.WindowsAccentColorInt;
            style = $":root {{ --accentHS: {h}, {s}%; --accentL: {l}%; --accent: {AppState.Stylesheet.WindowsAccentColor}}}\n\n; --accentInt: {r}, {g}, {b}" + style;
        }

        if (WindowSettings.Rtl)
            style = "@import url(css/rtl.min.css);\n" + style;

        if (WindowSettings.Background != "")
            style += $".programMain {{background: url({WindowSettings.Background}?{DateTimeOffset.Now.ToUnixTimeSeconds()})!important;background-size:cover!important;}}";

        // Add streamer mode censor.
        style += ".streamerCensor { display: " + (WindowSettings.StreamerModeEnabled && AppState.Stylesheet.StreamerModeTriggered ? "none!important" : "block") + "}";
        style += ".steamId { display: " + (SteamSettings.ShowSteamId ? "block" : "none") + " } .lastLogin { display: " + (SteamSettings.ShowLastLogin ? "block" : "none") + " }";

        return style;
    }

    protected override void OnInitialized()
    {
        AppState.Stylesheet.PropertyChanged += OnChange;
        OnChange();
    }

    void IDisposable.Dispose()
    {
        AppState.Stylesheet.PropertyChanged -= OnChange;
    }

    private void OnChange(object o = null, PropertyChangedEventArgs p = null)
    {
        var active = WindowSettings.ActiveTheme;
        _markup = new MarkupString(GetStylesheetMarkupString());
        InvokeAsync(StateHasChanged);
    }
}
