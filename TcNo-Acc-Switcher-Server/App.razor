@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@inject NavigationManager NavigationManager
@using TcNo_Acc_Switcher_Globals
@using TcNo_Acc_Switcher_Server.State.DataTypes
@using TcNo_Acc_Switcher_Server.State.Interfaces
@implements IDisposable
@inject IJSRuntime JsRuntime
@inject IToasts Toasts
@inject IStatistics Statistics
@inject ITemplatedPlatformState TemplatedPlatformState
@inject ITemplatedPlatformSettings TemplatedPlatformSettings
@inject IWindowSettings WindowSettings

<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code
{
    private EventHandler<LocationChangedEventArgs> _locationChanged;
    protected override void OnInitialized()
    {
        _locationChanged = async (s, e) => await LocationChanged(s, e);
        // Subscribe to the event
        NavigationManager.LocationChanged += _locationChanged;
        base.OnInitialized();

        NewNavigation(NavigationManager.Uri);
    }

    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= _locationChanged;
    }

    private async Task LocationChanged(object sender, LocationChangedEventArgs e)
    {
        var navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        Console.WriteLine($@"Notified of navigation via {navigationMethod} to {e.Location}");
        await HandleQueries();

        NewNavigation(e.Location);
    }

    private string _lastPage = "";
    private string _lastPlatform = "";

    private void NewNavigation(string uri)
    {
        uri = uri.Replace(NavigationManager.BaseUri, "").Split("?")[0];

        var platformString = "";
        if (string.IsNullOrEmpty(uri)) uri = "/";
        else
        {
            // If not the root, try substituting "d" with "Discord" for example.
            // Substitute platform with full platform name
            var platformStrings = uri.Split("/");
            TemplatedPlatformState.LoadTemplatedPlatformState(JsRuntime, TemplatedPlatformSettings);
            var possiblePlatform = WindowSettings.Platforms.FirstOrDefault(x => x.PossibleIdentifiers.Contains(platformStrings[0]) || x.Name == platformStrings[0]);

            if (possiblePlatform is not null)
            {
                // Replace entire string if no "/"
                if (platformStrings.Length == 1)
                    uri = possiblePlatform.Name;
                else
                {
                    platformString = platformStrings[0];
                    uri = uri.Replace(platformString, possiblePlatform.Name);
                }
            }
        }

        if (_lastPage != "") Statistics.NewNavigation(_lastPage, _lastPlatform);

        _lastPage = uri;
        _lastPlatform = uri.Contains("Steam") ? "Steam" : platformString;
    }

    /// <summary>
    /// For handling queries in URI
    /// </summary>
    public async Task<bool> HandleQueries()
    {
        Globals.DebugWriteLine(@"[JSInvoke:General\GeneralFuncs.HandleQueries]");
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        // Clear cache reload
        var queries = QueryHelpers.ParseQuery(uri.Query);
        // cacheReload handled in JS

        // Toast
        if (!queries.TryGetValue("toast_type", out var toastType) ||
            !queries.TryGetValue("toast_title", out var toastTitle) ||
            !queries.TryGetValue("toast_message", out var toastMessage)) return true;
        for (var i = 0; i < toastType.Count; i++)
        {
            try
            {
                var type = (ToastType)Enum.Parse(typeof(ToastType), toastType[i], true);
                await Toasts.ShowToastLangAsync(type, toastTitle[i], toastMessage[i]);
                await JsRuntime.InvokeVoidAsync("removeUrlArgs", "toast_type,toast_title,toast_message");
            }
            catch (TaskCanceledException e)
            {
                Globals.WriteToLog(e.ToString());
            }
        }

        return true;
    }
}
