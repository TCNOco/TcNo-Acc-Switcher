@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@using TcNo_Acc_Switcher_Server.Shared.Modal
@using TcNo_Acc_Switcher_Globals
@using TcNo_Acc_Switcher_Server.Pages.General
@using Newtonsoft.Json
@using System.IO
@using System.Text.RegularExpressions
@using TcNo_Acc_Switcher_Server.Pages.Steam
@using TcNo_Acc_Switcher_Server.State
@using TcNo_Acc_Switcher_Server.State.DataTypes
@using TcNo_Acc_Switcher_Server.State.Interfaces
@inject IModals Modals
@inject ILang Lang
@inject IJSRuntime JsRuntime
@inject IToasts Toasts

@code {

    [Parameter]
    public string RequestedPathType { get; set; } = "AnyFile";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await JsRuntime.InvokeVoidAsync("focusOn", "#NewAccountName");
    }

    private string _lastSelectedPath = "NONE"; // This MUST be set to something, or it will crawl EVERYTHING.
}

<div class="pathPicker">
    <div>
        <CascadingValue Value="@_lastSelectedPath">
            @foreach (var drive in LogicalDrivesList())
            {
                <PathPickerChildren CurrentPath="@drive" Depth="0"/>
            }
        </CascadingValue>
    </div>
</div>

@code
{

    private List<string> LogicalDrivesList()
    {
        try
        {
            return Directory.GetLogicalDrives().ToList();
        }
        catch (Exception e)
        {
            Globals.WriteToLog("Could not list Logical Drives.", e);
            Toasts.ShowToastLang(ToastType.Error, "PathPicker_NoLogicalDrives");
            return new List<string>();
        }
    }

    //// Pressed Enter on the input
    //private async Task KeyPress(KeyboardEventArgs k)
    //{

    //}

    //// Clicked the Change Username button
    //private async Task FinaliseAccNameChange()
    //{
    //    AppState.Switcher.SelectedAccount.NotifyDataChanged();

    //}
}
