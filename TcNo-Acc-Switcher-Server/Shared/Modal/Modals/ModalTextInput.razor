@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@using TcNo_Acc_Switcher_Server.Shared.Modal
@using TcNo_Acc_Switcher_Server.Data
@using TcNo_Acc_Switcher_Globals
@using TcNo_Acc_Switcher_Server.Pages.General
@using TcNo_Acc_Switcher_Server.Shared.Modal.Components
@using Newtonsoft.Json
@using System.IO
@using TcNo_Acc_Switcher_Server.State
@using TcNo_Acc_Switcher_Server.State.DataTypes
@inject Modals Modals
@inject IJSRuntime JsRuntime

@code {
    protected override void OnInitialized()
    {
        Modals.TextInputOnChange += OnChangeHandler;
        OnChangeHandler(); // Run once just to set vars
    }

    private async void OnChangeHandler()
    {
        Modals.Title = Modals.TextInput.ModalHeader;
        var t = Modals.TextInput.ExtraButtons;
        _extraButtonSet = Modals.TextInput.ExtraButtons.Value != new MarkupString().Value;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("focusOn", "#textInput");
    }

    private bool _extraButtonSet;
}

@if (Modals.TextInput.ModalSubheading.Value != new MarkupString().Value)
{
    <h3>@Modals.TextInput.ModalSubheading</h3>
}
<div>
    <span class="modal-text">@Modals.TextInput.ModalText</span>
</div>
<div class="inputAndButton">
    <input type="text" id="textInput" autocomplete="off" style="width: 100%;padding: 8px;" @onkeyup="KeyPress" value="@Modals.TextInput.LastString" @oninput="OnInput">
</div>
<div class="settingsCol inputAndButton">
    @if (_extraButtonSet)
    {
        @Modals.TextInput.ExtraButtons
    }
    <button class="modalOK" type="button" id="set_account_name" @onclick="Confirm"><span>@Modals.TextInput.ModalButtonText</span></button>
</div>

@code
{
    private void OnInput(ChangeEventArgs args)
    {
        if (Modals.TextInput.LastString.Contains("TCNO:")) // The request can contain/contains special, pasted chars for extra actions
            Modals.TextInput.LastString = args.Value?.ToString();
        else
            Modals.TextInput.LastString = Globals.GetCleanFilePath(args.Value?.ToString());
        Update();
    }

    // Pressed Enter on the input
    private async Task KeyPress(KeyboardEventArgs k)
    {
        // If enter was pressed
        if (k.Key == "Enter")
        {
             await Confirm();
        }
    }

    // Update dynamically as the user types.
    private void Update() => Modals.TextInputNotifyDataChanged();


    private async Task Confirm()
    {
        Modals.IsShown = false;

        if (Modals.TextInput.Goal == TextInputGoal.AppPassword)
            await Modals.SetAppPassword();
        else if (Modals.TextInput.Goal is TextInputGoal.AccString or TextInputGoal.ChangeUsername)
            await Modals.SetAccountString();


    }
}
