@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@using TcNo_Acc_Switcher_Server.Shared.Modal
@using TcNo_Acc_Switcher_Globals
@using TcNo_Acc_Switcher_Server.Pages.General
@using TcNo_Acc_Switcher_Server.Shared.Modal.Components
@using Newtonsoft.Json
@using System.IO
@using System.Web
@using TcNo_Acc_Switcher_Server.State
@using TcNo_Acc_Switcher_Server.State.DataTypes
@using TcNo_Acc_Switcher_Server.State.Interfaces
@inject IModals Modals
@inject IJSRuntime JsRuntime
@inject IAppState AppState
@inject ISteamSettings SteamSettings
@inject ITemplatedPlatformSettings TemplatedPlatformSettings
@inject IToasts Toasts
@inject NavigationManager NavigationManager
@inject IWindowSettings WindowSettings
@inject ILang Lang
@inject ITemplatedPlatformState TemplatedPlatformState


@code {
    public void UpdateType()
    {
        if (CurrentRequest.Goal == PathPickerGoal.None)
            return;

        if (CurrentRequest.Goal == PathPickerGoal.FindPlatformExe)
        {
            var platformName = AppState.Switcher.CurrentSwitcher;
            CurrentRequest.RequestedFile = AppState.Switcher.CurrentSwitcher == "Steam" ? "steam.exe" : TemplatedPlatformState.CurrentPlatform.ExeName;

            CurrentRequest.ModalHeader = Lang["Modal_Title_LocatePlatform", new { platform = platformName }];
            CurrentRequest.ModalText = new MarkupString(Lang["Modal_EnterDirectory", new { platform = platformName }]);
            CurrentRequest.ModalButtonText = Lang["Modal_LocatePlatformFolder", new { platform = platformName }];

            ConfirmTask = UpdatePlatformFolder;
        }
        else if (CurrentRequest.Goal == PathPickerGoal.SetBackground)
        {
            CurrentRequest.ModalHeader = Lang["Modal_Title_Background"];
            CurrentRequest.ModalText = new MarkupString(Lang["Modal_SetBackground"]);
            CurrentRequest.ModalButtonText = Lang["Modal_SetBackground_Button"];
            CurrentRequest.RequestedFile = "AnyFile";

            ConfirmTask = SetBackground;
        }
        else if (CurrentRequest.Goal == PathPickerGoal.SetUserdata)
        {
            CurrentRequest.ModalHeader = Lang["Modal_Title_Userdata"];
            CurrentRequest.ModalText = new MarkupString(Lang["Modal_SetUserdata"]);
            CurrentRequest.ModalButtonText = Lang["Modal_SetUserdata_Button"];
            CurrentRequest.RequestedFile = "AnyFolder";

            ConfirmTask = async () => await ChangeUserdataFolder();
        }
        else if (CurrentRequest.Goal == PathPickerGoal.SetAccountImage)
        {
            CurrentRequest.ModalHeader = Lang["Modal_Title_Userdata"];
            CurrentRequest.ModalText = new MarkupString(Lang["Modal_SetImageHeader"]);
            CurrentRequest.ModalButtonText = Lang["Modal_SetImage"];
            CurrentRequest.RequestedFile = "AnyFile";

            ConfirmTask = ChangeAccImage;
        }

        OnChangeHandler(); // Run once just to set vars
    }

    private Action ConfirmTask { get; set; }

    private async Task Confirm()
    {
        Modals.IsShown = false;
        await Task.Run(ConfirmTask);
        CurrentRequest.Goal = PathPickerGoal.None;
    }

    protected override void OnInitialized()
    {
        Modals.PathPickerOnChange += UpdateType;
        CurrentRequest.PropertyChanged += (_, _) => UpdateType();
        UpdateType();
    }

    private async void OnChangeHandler()
    {
        Modals.Title = CurrentRequest.ModalHeader;

        _found = false;
        var r = CurrentRequest.RequestedFile;

        // Show/Hide indicator
        if (r != "AnyFile" && r != "AnyFolder") _showIndicator = true;

        if (r == "AnyFile" && CurrentRequest.LastElement == PathPickerElement.File) // Any file requested and one was clicked.
            _found = true;
        else if (r == "AnyFolder" && CurrentRequest.LastElement == PathPickerElement.Folder) // Any folder requested and one was clicked.
            _found = true;
        else if (CurrentRequest.LastPath.EndsWith(r)) // Specific file or folder requested and one was clicked.
            _found = true;
        else if (CurrentRequest.Goal == PathPickerGoal.FindPlatformExe
                 && !string.IsNullOrEmpty(CurrentRequest.LastPath)
                 && !Globals.IsFile(CurrentRequest.LastPath) // The path doesn't end with <app.exe>, so check to see if the folder contains it. This is accepted for FindPlatformExe.
                 && Directory.Exists(CurrentRequest.LastPath)
                 && Directory.GetFiles(CurrentRequest.LastPath).ToList().Contains(CurrentRequest.RequestedFile))
            _found = true;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("focusOn", "#path");
    }

    private bool _showIndicator = false;
    private bool _found;

    private PathPickerRequest CurrentRequest => Modals.PathPicker;

    private static readonly List<string> SupportedImageTypes = new() { "apng", "avif", "bmp", "cur", "ico", "gif", "jpg", "jfif", "pjpeg", "pjp", "png", "svg", "tif", "tiff", "webp" };
    private bool IsImage => SupportedImageTypes.Any(CurrentRequest.LastPath.ToLowerInvariant().EndsWith);

    private string _imageBase64 = "";

    private string ImageBase64
    {
        get => _imageBase64;
        set
        {
            _imageBase64 = value;
            InvokeAsync(StateHasChanged);
        }
    }

    private bool TryGetBase64()
    {
        // Read image file in background
        Task.Run(() =>
        {
            try
            {
                ImageBase64 = Convert.ToBase64String(File.ReadAllBytes(CurrentRequest.LastPath));
            }
            catch (Exception)
            {
                ImageBase64 = "";
            }
        });

        return true;
    }

    private string ImageBase64Type()
    {
        var fileType = CurrentRequest.LastPath.ToLowerInvariant().Split(".").Last();
        return fileType == "svg" ? "svg+xml" : fileType;
    }
}

@if (IsImage && TryGetBase64())
{
    <div class="text_and_image">
        <p class="modal-text">@CurrentRequest.ModalText</p>
        <img src="data:image/@(ImageBase64Type());base64,@(ImageBase64)" alt="PreviewImage"/>
    </div>
}else{
    <div>
        <p class="modal-text">@CurrentRequest.ModalText</p>
    </div>
}
<div class="inputAndButton">
    <input type="text" id="path" autocomplete="off" style="width: 100%;padding: 8px;" @onkeyup="KeyPress" value="@CurrentRequest.LastPath" @oninput="OnInput">
</div>
<div class="settingsCol inputAndButton">
    @if (_showIndicator)
    {
        <div class="folder_indicator @(_found ? "found" : "notfound")">
            <div id="folder_indicator_text"></div>
        </div>
        <div class="folder_indicator_bg @(_found ? "found" : "notfound")"><span>@CurrentRequest.RequestedFile</span></div>
    }
    <button class="modalOK" type="button" id="set_background" @onclick="Confirm"><span>@CurrentRequest.ModalButtonText</span></button>
</div>
<PathPicker />

@code
{
    private async Task OnInput(ChangeEventArgs args)
    {
        CurrentRequest.LastPath = args.Value?.ToString();
        Update();
        await JsRuntime.InvokeVoidAsync("pathPickerScrollToElement");
    }

    // Pressed Enter on the input
    private async Task KeyPress(KeyboardEventArgs k)
    {
        // If enter was pressed
        if (k.Key == "Enter")
        {
             await Confirm();
        }
    }

    // Update dynamically as the user types.
    private void Update() => Modals.PathPickerNotifyDataChanged();

    /// <summary>
    /// Import image to use as the app background
    /// </summary>
    public void SetBackground()
    {
        var path = CurrentRequest.LastPath;

        WindowSettings.Background = $"{path}";

        if (File.Exists(path) && path != "")
        {
            Directory.CreateDirectory(Path.Join(Globals.UserDataFolder, "wwwroot\\img\\custom\\"));
            Globals.CopyFile(path, Path.Join(Globals.UserDataFolder, "wwwroot\\img\\custom\\background" + Path.GetExtension(path)));
            WindowSettings.Background = $"img/custom/background{Path.GetExtension(path)}";
            WindowSettings.Save();
        }
    }

    /// <summary>
    /// Moves all Userdata files to a new folder, and set it as default.
    /// </summary>
    public async Task ChangeUserdataFolder()
    {
        var path = CurrentRequest.LastPath;
        // Verify this is different.
        var diOriginal = new DirectoryInfo(Globals.UserDataFolder);
        var diNew = new DirectoryInfo(path);
        if (diOriginal.FullName == diNew.FullName) return;

        if (Directory.Exists(path) && path != "")
        {
            await File.WriteAllTextAsync(Path.Join(Globals.AppDataFolder, "userdata_path.txt"), path);
        }

        bool folderEmpty;
        if (Directory.Exists(path))
            folderEmpty = Globals.IsDirectoryEmpty(path);
        else
        {
            folderEmpty = true;
            Directory.CreateDirectory(path);
        }


        if (folderEmpty)
        {
            Toasts.ShowToastLang(ToastType.Info, "Toast_DataLocationCopying");
            if (!Globals.CopyFilesRecursive(Globals.UserDataFolder, path))
                Toasts.ShowToastLang(ToastType.Error, "Toast_FileCopyFail");
        }
        else
            Toasts.ShowToastLang(ToastType.Info, "Toast_DataLocationNotCopying");

        Toasts.ShowToastLang(ToastType.Info, "Toast_DataLocationSet");
    }

    /// <summary>
    /// Update an accounts username
    /// </summary>
    public void ChangeAccImage()
    {
        // Verify path exists and copy image in.
        if (!File.Exists(CurrentRequest.LastPath)) return;
        var imageDest = Path.Join(Globals.UserDataFolder, "wwwroot\\img\\profiles\\", AppState.Switcher.CurrentSwitcherSafe);
        Globals.CopyFile(CurrentRequest.LastPath, Path.Join(imageDest, AppState.Switcher.SelectedAccountId + ".jpg"));

        // Update file last write time, so it's not deleted and updated.
        File.SetLastWriteTime(Path.Join(imageDest, AppState.Switcher.SelectedAccountId + ".jpg"), DateTime.Now);

        // Reload page.
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        Toasts.ShowToastLang(ToastType.Success, "Toast_UpdatedImage");
    }


    /// <summary>
    /// Change the selected platform's EXE folder to another and save changes
    /// </summary>
    public void UpdatePlatformFolder()
    {
        var path = CurrentRequest.LastPath;
        Globals.DebugWriteLine($@"[Modals.UpdatePlatformFolder] file={AppState.Switcher.CurrentSwitcher}, path={path}");
        if (!Globals.IsFolder(path))
            path = Path.GetDirectoryName(path); // Remove .exe
        if (!string.IsNullOrWhiteSpace(path) && path.EndsWith(".exe"))
            path = Path.GetDirectoryName(path) ?? string.Join("\\", path.Split("\\")[..^1]);

        if (AppState.Switcher.CurrentSwitcher == "Steam")
            SteamSettings.FolderPath = path;
        else
            TemplatedPlatformSettings.FolderPath = path;
    }
}
