@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@using TcNo_Acc_Switcher_Server.Shared.Modal
@using TcNo_Acc_Switcher_Server.Data
@using TcNo_Acc_Switcher_Globals
@using TcNo_Acc_Switcher_Server.Data.Settings
@using TcNo_Acc_Switcher_Server.Pages.General
@using TcNo_Acc_Switcher_Server.Shared.Modal.Components
@using Newtonsoft.Json
@using System.IO
@code {
    protected override void OnInitialized()
    {
        ModalData.Instance.PathPickerOnChange += OnChangeHandler;
        OnChangeHandler(); // Run once just to set vars
    }

    private async void OnChangeHandler()
    {
        ModalData.Title = ModalData.PathPicker.ModalHeader;

        _found = false;
        var pp = ModalData.PathPicker;
        var r = pp.RequestedFile;

        // Show/Hide indicator
        if (r != "AnyFile" && r != "AnyFolder") _showIndicator = true;

        if (r == "AnyFile" && pp.LastElement == ModalData.PathPickerRequest.PathPickerElement.File) // Any file requested and one was clicked.
            _found = true;
        else if (r == "AnyFolder" && pp.LastElement == ModalData.PathPickerRequest.PathPickerElement.Folder) // Any folder requested and one was clicked.
            _found = true;
        else if (pp.LastPath.EndsWith(r)) // Specific file or folder requested and one was clicked.
            _found = true;
        else if (ModalData.PathPicker.Goal == ModalData.PathPickerRequest.PathPickerGoal.FindPlatformExe
                 && !string.IsNullOrEmpty(ModalData.PathPicker.LastPath)
                 && !Globals.IsFile(ModalData.PathPicker.LastPath) // The path doesn't end with <app.exe>, so check to see if the folder contains it. This is accepted for FindPlatformExe.
                 && Directory.Exists(ModalData.PathPicker.LastPath)
                 && Directory.GetFiles(ModalData.PathPicker.LastPath).ToList().Contains(ModalData.PathPicker.RequestedFile))
            _found = true;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ModalData.Instance.PathPickerOnChange -= OnChangeHandler;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await AppData.InvokeVoidAsync("focusOn", "#path");
    }

    private bool _showIndicator = false;
    private bool _found;
}

<div>
    <p class="modal-text">@ModalData.PathPicker.ModalText</p>
</div>
<div class="inputAndButton">
    <input type="text" id="path" autocomplete="off" style="width: 100%;padding: 8px;" @onkeyup="KeyPress" value="@ModalData.PathPicker.LastPath" @oninput="OnInput">
</div>
<div class="settingsCol inputAndButton">
    @if (_showIndicator)
    {
        <div class="folder_indicator @(_found ? "found" : "notfound")">
            <div id="folder_indicator_text"></div>
        </div>
        <div class="folder_indicator_bg @(_found ? "found" : "notfound")"><span>@ModalData.PathPicker.RequestedFile</span></div>
    }
    <button class="modalOK" type="button" id="set_background" @onclick="Confirm"><span>@ModalData.PathPicker.ModalButtonText</span></button>
</div>
<PathPicker />

@code
{
    private async Task OnInput(ChangeEventArgs args)
    {
        ModalData.PathPicker.LastPath = args.Value?.ToString();
        Update();
        await AppData.InvokeVoidAsync("pathPickerScrollToElement");
    }

    // Pressed Enter on the input
    private async Task KeyPress(KeyboardEventArgs k)
    {
        // If enter was pressed
        if (k.Key == "Enter")
        {
             await Confirm();
        }
    }

    // Update dynamically as the user types.
    private void Update() => ModalData.PathPickerNotifyDataChanged();


    private async Task Confirm()
    {
        ModalData.IsShown = false;

        if (ModalData.PathPicker.Goal == ModalData.PathPickerRequest.PathPickerGoal.FindPlatformExe)
            ModalFuncs.UpdatePlatformFolder();
        else if (ModalData.PathPicker.Goal == ModalData.PathPickerRequest.PathPickerGoal.SetBackground)
            ModalFuncs.SetBackground();
        else if (ModalData.PathPicker.Goal == ModalData.PathPickerRequest.PathPickerGoal.SetUserdata)
            await ModalFuncs.ChangeUserdataFolder();
        else if (ModalData.PathPicker.Goal == ModalData.PathPickerRequest.PathPickerGoal.SetAccountImage)
            await ModalFuncs.ChangeAccImage();


    }
}
