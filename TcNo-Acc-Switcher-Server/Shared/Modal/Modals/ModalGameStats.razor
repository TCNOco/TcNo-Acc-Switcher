@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@using TcNo_Acc_Switcher_Server.Shared.Modal
@using TcNo_Acc_Switcher_Globals
@using TcNo_Acc_Switcher_Server.Pages.General
@using TcNo_Acc_Switcher_Server.Shared.Modal.Components
@using TcNo_Acc_Switcher_Server.Shared.Tooltip
@using Newtonsoft.Json
@using System.IO
@using SteamKit2.GC.Dota.Internal
@using TcNo_Acc_Switcher_Server.State
@using TcNo_Acc_Switcher_Server.State.DataTypes
@using TcNo_Acc_Switcher_Server.State.Interfaces
@inject IAppState AppState
@inject IModals Modals
@inject ILang Lang
@inject IGameStats GameStats
@inject IToasts Toasts
@inject IWindowSettings WindowSettings
@implements IDisposable

@code {
    private Action _onChangeHandler;
    protected override async Task OnInitializedAsync()
    {
        _onChangeHandler = async () => await OnChangeHandler();;
        Modals.GameStatsModalOnChange += _onChangeHandler;
        await OnChangeHandler(); // Run once just to set vars
    }

    void IDisposable.Dispose()
    {
        Modals.GameStatsModalOnChange -= _onChangeHandler;
    }

    private async Task OnChangeHandler()
    {
        if (Modals.CurrentStatsSelectorState == StatsSelectorState.GamesList)
        {
            Modals.Title = Lang["Modal_Title_GameStats"];
            _editButtonText = Lang["Edit"];
            _refreshButtonText = Lang["Refresh"];

        }
        else if (Modals.CurrentStatsSelectorState == StatsSelectorState.VarsList)
        {
            Modals.Title = Lang["Modal_Title_GameVars", new { game = _currentGame }];
            CalcGameVars();
        }

        await InvokeAsync(StateHasChanged);
    }


    // List of games from X platform, with Y accountId associated.
    private Dictionary<string, string> GetEnabledGames {
        get
        {
            Dictionary<string, string> enabledGames = new();
            foreach (var game in GameStats.GetAvailableGames)
            {
                if (!GameStats.SavedStats.ContainsKey(game)) continue;
                if (GameStats.SavedStats[game].CachedStats.ContainsKey(AppState.Switcher.SelectedAccountId))
                {
                    enabledGames.Add(game, Globals.GetCleanFilePath(game));
                }
            }
            return enabledGames;
        }
    }
    //private Dictionary<string, string> GetEnabledGames
    //{
    //    get
    //    {
    //        var val = new Dictionary<string, string>();
    //        foreach (var availableGame in GameStats.GetAvailableGames)
    //        {
    //            if (GameStats.SavedStats.ContainsKey(availableGame) && GameStats.SavedStats[availableGame].CachedStats.ContainsKey(AppState.Switcher.SelectedAccountId))
    //            {
    //                val.Add(availableGame, Globals.GetCleanFilePath(Globals.GetCleanFilePath(availableGame)));
    //            }
    //        }
    //        return val;
    //    }
    //}


    // List of games from X platform, NOT with Y accountId associated.
    private Dictionary<string, string> GetDisabledGames {
        get
        {
            Dictionary<string, string> disabledGames = new();
            foreach (var game in GameStats.GetAvailableGames)
            {
                if (!GameStats.SavedStats.ContainsKey(game) || !GameStats.SavedStats[game].CachedStats.ContainsKey(AppState.Switcher.SelectedAccountId))
                {
                    disabledGames.Add(game, Globals.GetCleanFilePath(game));
                }
            }
            return disabledGames;
        }
    }

    // Disables specific games
    private void DisableGame(string game)
    {
        if (!GameStats.SavedStats.ContainsKey(game) || !GameStats.SavedStats[game].CachedStats.ContainsKey(AppState.Switcher.SelectedAccountId)) return;

        GameStats.SavedStats[game].CachedStats.Remove(AppState.Switcher.SelectedAccountId);
        GameStats.SavedStats[game].SaveStats();

        InvokeAsync(StateHasChanged);
        UpdateAccountList();
    }


    #region Game Vars
    private string _currentGame = "";

    private Dictionary<string, string> GetRequiredVars => GameStats.SavedStats.ContainsKey(_currentGame) ? GameStats.SavedStats[_currentGame].RequiredVars : new Dictionary<string, string>();

    private Dictionary<string, string> GetExistingVars
    {
        get
        {
            if (!GameStats.SavedStats.ContainsKey(_currentGame)) return new Dictionary<string, string>();
            if (GameStats.SavedStats[_currentGame].CachedStats.ContainsKey(AppState.Switcher.SelectedAccountId))
                return GameStats.SavedStats[_currentGame].CachedStats[AppState.Switcher.SelectedAccountId].Vars;
            return new Dictionary<string, string>();
        }
    }

    // Gets list of all metric names to collect for the provided account, as well as whether each is hidden or not, and the text to display in the UI checkbox.
    private Dictionary<string, Tuple<bool, string>> GetHiddenMetrics()
    {
        var returnDict = new Dictionary<string, Tuple<bool, string>>();
        if (_currentGame == "") return returnDict;
        foreach (var (key, _) in GameStats.SavedStats[_currentGame].ToCollect)
        {
            var hidden = GameStats.SavedStats[_currentGame].CachedStats.ContainsKey(AppState.Switcher.SelectedAccountId)
                         && GameStats.SavedStats[_currentGame].CachedStats[AppState.Switcher.SelectedAccountId].HiddenMetrics.Contains(key);
            var text = GameStats.SavedStats[_currentGame].ToCollect[key].ToggleText;
            returnDict.Add(key, new Tuple<bool, string>(hidden, text));
        }

        return returnDict;
    }

    // Get list of metrics that are set to hidden from the settings menu. This overrides individual account settings.
    private List<string> GetGloballyHiddenMetrics =>
        (from metric in WindowSettings.GloballyHiddenMetrics[_currentGame] where metric.Value select metric.Key).ToList();

    private class VarTextInput
    {
        public string Text;
        public string Placeholder;
        public string Value;
    }

    private class HiddenMetrics
    {
        public string Text;
        public bool IsChecked;
        public bool GloballyHidden;
    }

    private Dictionary<string, VarTextInput> _varTextInputs = new();
    private Dictionary<string, HiddenMetrics> _hiddenMetrics = new();

    private void CalcGameVars()
    {
        _varTextInputs = new Dictionary<string, VarTextInput>();
        _hiddenMetrics = new Dictionary<string, HiddenMetrics>();

        foreach (var (varName, v) in GetRequiredVars)
        {
            var placeholder = "";
            var text = v;

            if (text.Contains("[") && text.Contains("]")) {
                var parts = text.Split("[");
                text = parts[0].Trim();
                placeholder = parts[1].Trim().Replace("]", "");
            }

            var existingValue = GetExistingVars.ContainsKey(varName) ? GetExistingVars[varName] : "";
            if (text == "%ACCOUNTID%")
            {
                text = Lang["Stats_AccountId"];
                if (existingValue == "")
                    existingValue = AppState.Switcher.SelectedAccountId;
            }

            _varTextInputs.Add(varName, new VarTextInput { Text = text, Placeholder = placeholder, Value = existingValue });
        }


        foreach (var (metricId, (metricHidden, checkboxText)) in GetHiddenMetrics())
        {
            _hiddenMetrics.Add(metricId, new HiddenMetrics { Text = checkboxText, IsChecked = !metricHidden, GloballyHidden = GetGloballyHiddenMetrics.Contains(metricId) });
        }
    }
    #endregion

    private string _editButtonText;
    private string _refreshButtonText;
}

@if (Modals.CurrentStatsSelectorState == StatsSelectorState.GamesList)
{
    <div class="gameStatsWindow">
        <p>@Lang["Modal_GameStats_Header", new { accountName = AppState.Switcher.SelectedAccount.DisplayName }]</p>
        <div class="modalScrollSection">
            @foreach (var (game, safeGame) in GetEnabledGames)
            {
                <div class="rowSetting">
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="checkbox" id="@safeGame" @onclick="() => DisableGame(game)" checked><label class="form-check-label" for="@safeGame"></label><label for="@safeGame">@game<br></label></div>
                    <div>
                        <button type="button" @onclick="async () => await ShowVarsList(game)"><span>@_editButtonText</span></button>
                        <button type="button" @onclick="async () => await RefreshAccount(game)"><span>@_refreshButtonText</span></button>
                    </div>
                </div>
            }

            @foreach (var (game, safeGame) in GetDisabledGames)
            {
                <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="@safeGame" @onclick="() => ShowVarsList(game)"><label class="form-check-label" for="@safeGame"></label><label for="@safeGame">@game<br></label>
                </div>
            }
        </div>
    </div>
}
@if (Modals.CurrentStatsSelectorState == StatsSelectorState.VarsList)
{
    <div class="gameStatsWindow">
        <p>@Lang["Modal_GameVars_Header", new { game = _currentGame, username = AppState.Switcher.SelectedAccount.DisplayName, platform = AppState.Switcher.CurrentSwitcher }]</p>
        <div class="modalScrollSection centeredContainer">
            <div class="centeredSection">
                @foreach (var (id, textInput) in _varTextInputs)
                {
                    <div class="rowSetting">
                        <span>@textInput.Text</span>
                        <input type="text" @bind="textInput.Value" spellcheck="false" placeholder="@textInput.Placeholder">
                    </div>
                }
            </div>
        </div>
        <div>
            <p>@Lang["Stats_MetricsToShow"]</p>
            @foreach (var (id, hiddenMetric) in _hiddenMetrics)
            {
                @if (hiddenMetric.GloballyHidden)
                {
                    <Tooltip Text="@Lang["Tooltip_DisabledGlobally"]" Class="form-check mb-2">
                        <input class="form-check-input" type="checkbox" id="@id" @bind="hiddenMetric.IsChecked" disabled>
                        <label class="form-check-label" for="@id"></label>
                        <label for="@id">@hiddenMetric.Text<br></label>
                    </Tooltip>
                } else {
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="checkbox" id="@id" @bind="hiddenMetric.IsChecked">
                        <label class="form-check-label" for="@id"></label>
                        <label for="@id">@hiddenMetric.Text<br></label>
                    </div>
                }
            }
        </div>
        <div class="settingsCol inputAndButton">
            <button class="modalOK" type="button" id="set_password" @onclick="SaveGameVars"><span>@Lang["Submit"]</span></button>
        </div>
    </div>
}





@code
{
    private async Task ShowVarsList(string game)
    {
        _currentGame = game;
        Modals.CurrentStatsSelectorState = StatsSelectorState.VarsList;
        await OnChangeHandler();
    }

    List<string> _currentlyRefreshing = new();
    private async Task RefreshAccount(string game)
    {
        await GameStats.RefreshSelectedAccount(game);
        UpdateAccountList();
    }

    private void UpdateAccountList(){
        AppState.Switcher.SelectedAccount.SetUserStats(GameStats);

    }

    private async Task SaveGameVars()
    {
        Modals.IsShown = false;
        var vars = new Dictionary<string, string>();
        foreach (var (id, textInput) in _varTextInputs)
        {
            vars.Add(id, textInput.Value);
        }

        var hiddenMetrics = new List<string>();
        foreach (var (id, _) in _hiddenMetrics.Where(x => !x.Value.IsChecked))
        {
            hiddenMetrics.Add(id);
        }

        await GameStats.SavedStats[_currentGame].SetAccount(vars, hiddenMetrics);

        // If profile image is ticked, update:
        if (_hiddenMetrics.ContainsKey("%PROFILEIMAGE%") && _hiddenMetrics["%PROFILEIMAGE%"].IsChecked)
            await GameStats.RefreshSelectedAccount(_currentGame);

        Modals.CurrentStatsSelectorState = StatsSelectorState.GamesList;
        UpdateAccountList();
        Modals.CloseModal();
    }
}
