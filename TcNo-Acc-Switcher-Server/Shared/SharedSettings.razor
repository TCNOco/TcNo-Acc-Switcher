@using TcNo_Acc_Switcher_Server.Data
@using TcNo_Acc_Switcher_Server.Pages.General
@using System.Diagnostics
@using System.IO
@using Microsoft.AspNetCore.Components
@using TcNo_Acc_Switcher_Globals
@using TcNo_Acc_Switcher_Server.Data.Interfaces
@using TcNo_Acc_Switcher_Server.Shared.Modal
@using TcNo_Acc_Switcher_Server.Shared.Toast
@using TcNo_Acc_Switcher_Server.State.Interfaces
@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@inject ILang Lang
@inject NavigationManager NavManager
@inject AppData AData
@inject AppSettings ASettings
@inject IStylesheetSettings StylesheetSettings
@{ AData.SetActiveNavMan(NavManager); }

<h1 class="SettingsHeader">@Lang["Settings_Header_AppWide"]</h1>


<h2 class="SettingsHeader">@Lang["Settings_Header_Language"]</h2>
<div class="rowSetting rowDropdown">
    <ChooseLanguage/>
</div>
<div class="rowSetting">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="RTL" @bind="AppSettings.Instance.Rtl" @onclick="AppData.ReloadPage"><label class="form-check-label" for="RTL"></label>
    </div>
    <label for="RTL">
        @Lang["Settings_RTL"]<br>
    </label>
</div>



<h2 class="SettingsHeader">@Lang["Settings_Header_Theme"]</h2>
<div class="rowSetting rowDropdown">
    <span>@Lang["Settings_CurrentStyle"]</span>
    <div class="dropdown">
        <button class="dropdown-toggle" type="button" data-toggle="dropdown">
            @StylesheetSettings.StylesheetInfo["name"]
            <span class="caret"></span>
        </button>
        <ul class="custom-dropdown-menu dropdown-menu">
            @foreach (var item in StylesheetSettings.GetStyleList())
            {
                <li class="custom-dropdown-item dropdown-item" @onclick="() => StylesheetSettings.SwapStylesheet(item)">@item</li>
            }
        </ul>
    </div>
    <button id="AppSett_TestCss" type="button" @onclick='() => NavManager.NavigateTo("/Settings/PreviewCss")'><span>@Lang["PreviewCss"]</span></button>
</div>
<div class="rowSetting listWithBars">
    <ul>
        <li>
            <a class="fancyLink" @onclick="ModalFuncs.ShowSetBackgroundModal">@Lang["Settings_ThemeBackground"]</a>
        </li>
        <li>
            <a class="fancyLink" @onclick='() => Process.Start("explorer.exe", Path.Join(Globals.UserDataFolder, "themes"))'>@Lang["Settings_ThemeOpenFolder"]</a>
        </li>
    </ul>
</div>
<div class="rowSetting">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="AppSett_WinAccent" @bind="StylesheetSettings.WindowsAccent" @onclick="WindowsAccent_Toggle"><label class="form-check-label" for="AppSett_WinAccent"></label>
    </div>
    <label for="AppSett_WinAccent">
        @Lang["Settings_WindowsAccent"]<br>
    </label>
</div>



<h2 class="SettingsHeader">@Lang["Settings_Header_System"]</h2>

<div class="rowSetting">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="AlwaysAdmin_Settings" @bind="AppSettings.Instance.AlwaysAdmin"><label class="form-check-label" for="AlwaysAdmin_Settings"></label>
    </div>
    <label for="AlwaysAdmin_Settings">@Lang["Settings_AlwaysAdmin"]<br></label>
</div>
<div class="rowSetting">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="AppSett_DesktopShortcut" @bind="AppSettings.Instance.DesktopShortcut" @onclick="DesktopShortcut_Toggle"><label class="form-check-label" for="AppSett_DesktopShortcut"></label>
    </div>
    <label for="AppSett_DesktopShortcut">
        @Lang["Settings_DesktopShortcut"]<br>
    </label>
</div>
<div class="rowSetting">
    <span>@Lang["Cleaning_Header_StartMenuShortcuts"]</span>
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="AppSett_StartMenu" @bind="AppSettings.Instance.StartMenu" @onclick="() => StartMenu_Toggle(false)"><label class="form-check-label" for="AppSett_StartMenu"></label>
    </div>
    <label for="AppSett_StartMenu">
        @Lang["Settings_StartMenu_ProgramTray"]<br>
    </label>
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="AppSett_StartMenuPlatform" @bind="AppSettings.Instance.StartMenuPlatforms" @onclick="() => StartMenu_Toggle(true)"><label class="form-check-label" for="AppSett_StartMenuPlatform"></label>
    </div>
    <label for="AppSett_StartMenuPlatform">
        @Lang["Settings_StartMenu_Platform"]<br>
    </label>
</div>
<div class="rowSetting">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="AppSett_TrayStartup" @bind="AppSettings.Instance.TrayStartup" @onclick="AutoStart_Toggle"><label class="form-check-label" for="AppSett_TrayStartup"></label>
    </div>
    <label for="AppSett_TrayStartup">
        @Lang["Settings_Tray_StartWindows"]<br>
    </label>&nbsp;<a class="fancyLink" @onclick="Button_StartTray">@Lang["Settings_Tray_StartNow"]</a>
</div>

<div class="rowSetting">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="AppSett_Protocol" @bind="AppSettings.Instance.ProtocolEnabled" @onclick="Button_ToggleProtocol"><label class="form-check-label" for="AppSett_Protocol"></label>
    </div>
    <label for="AppSett_Protocol">
        @Lang["Settings_Protocol"]<br>
    </label>
</div>

@if (AppData.TcNoClientApp)
{
    <div class="rowSetting">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="AppSett_StartCentered" @bind="AppSettings.Instance.StartCentered"><label class="form-check-label" for="AppSett_StartCentered"></label>
        </div>
        <label for="AppSett_StartCentered">
            @Lang["Settings_StartCentered"]<br>
        </label>
    </div>
}
<div class="rowSetting">
    <span>@Lang["Settings_Header_AppPassword"]</span>
    <button id="AppSett_SetPassword" type="button" @onclick="SetPassword"><span>@Lang["Button_SetPassword"]</span></button>
</div>


<h2 class="SettingsHeader">@Lang["Settings_Header_Program"]</h2>
<div class="rowSetting">
    <p>
        @Lang["Settings_CurrentDataLocation", new {path = Globals.UserDataFolder}]
        <br>
        <a class="fancyLink" @onclick="TrySetUserData">@Lang["Settings_SetDataLocation"]</a>
    </p>
</div>
@if (AppData.TcNoClientApp)
{
    <div class="rowSetting rowDropdown">
        <span>@Lang["Settings_Header_ActiveBrowser"]</span>
        <div class="dropdown">
            <ul class="custom-dropdown-menu dropdown-menu">
                <li class="custom-dropdown-item dropdown-item" @onclick='() => SetActiveBrowser("WebView")'>WebView</li>
                <li class="custom-dropdown-item dropdown-item" @onclick='() => SetActiveBrowser("CEF")'>CEF</li>
            </ul>
            <button class="dropdown-toggle" type="button" data-toggle="dropdown">
                @AppSettings.Instance.ActiveBrowser
                <span class="caret"></span>
            </button>
        </div>
    </div>
    <div class="rowSetting">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="TrayMinimizeNotExit" @bind="AppSettings.Instance.TrayMinimizeNotExit" @onclick="TrayMinimizeNotExit_Toggle"><label class="form-check-label" for="TrayMinimizeNotExit"></label>
        </div>
        <label for="TrayMinimizeNotExit">
            @Lang["Settings_ExitToTray"]<br>
        </label>
    </div>
    <div class="rowSetting">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="AppSett_MinimizeOnSwitch" @bind="AppSettings.Instance.MinimizeOnSwitch"><label class="form-check-label" for="AppSett_MinimizeOnSwitch"></label>
        </div>
        <label for="AppSett_MinimizeOnSwitch">
            @Lang["Settings_MinimizeOnSwitch"]<br>
        </label>
    </div>
}
<div class="rowSetting">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="StreamerMode" @bind="AppSettings.Instance.StreamerModeEnabled"><label class="form-check-label" for="StreamerMode"></label>
    </div>
    <label for="StreamerMode">
        @Lang["Settings_StreamerMode"]<br>
    </label>
</div>


<h2 class="SettingsHeader">@Lang["Settings_Header_StatsSharing"]</h2>
<div class="rowSetting">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="AppSett_CollectStats" @bind="AppSettings.Instance.StatsEnabled" @onclick="() => AppData.RefreshDiscordPresenceAsync(false)"><label class="form-check-label" for="AppSett_CollectStats"></label>
    </div>
    <label for="AppSett_CollectStats">
        @Lang["Settings_CollectStats"]<br>
    </label>

    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="AppSett_ShareStats" @bind="AppSettings.Instance.ShareAnonymousStats"><label class="form-check-label" for="AppSett_ShareStats"></label>
    </div>
    <label for="AppSett_ShareStats">
        @Lang["Settings_ShareStats"]<br>
    </label>

    <button id="AppSett_ViewStats" type="button" @onclick='() => ModalData.ShowModal("showStats")'><span>@Lang["Settings_ViewStats"]</span></button>
    <button id="AppSett_ClearStats" type="button" @onclick='() => ModalData.ShowModal("notice", ModalData.ExtraArg.ClearStats)'><span>@Lang["Settings_ClearStats"]</span></button>
</div>
<div class="rowSetting">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="AppSett_DiscordRpc" @bind="AppSettings.Instance.DiscordRpc" @onclick="() => AppData.RefreshDiscordPresenceAsync(false)"><label class="form-check-label" for="AppSett_DiscordRpc"></label>
    </div>
    <label for="AppSett_DiscordRpc">
        @Lang["Settings_DiscordRpc"]<br>
    </label>

    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="AppSett_DiscordRpcSwitches" @bind="AppSettings.Instance.DiscordRpcShareTotalSwitches" @onclick="() => AppData.RefreshDiscordPresenceAsync(false)"><label class="form-check-label" for="AppSett_DiscordRpcSwitches"></label>
    </div>
    <label for="AppSett_DiscordRpcSwitches">
        @Lang["Settings_DiscordRpcShare"]<br>
    </label>
</div>

@code
{
    protected override void OnInitialized()
    {
        StylesheetSettings.Updated += () => InvokeAsync(StateHasChanged);
    }

    public async Task SetPassword()
    {
        Globals.DebugWriteLine(@"[ButtonClicked:SharedSettings.razor/SetPassword]");
        await GeneralInvocableFuncs.ShowModal("setAppPassword");
    }

    private void TrySetUserData()
    {
        // Verify that user can create file in program files folder first.
        try
        {
            var userDataFile = Path.Join(Globals.AppDataFolder, "userdata_path.txt");
            if (File.Exists(userDataFile))
                File.Delete(userDataFile);

            File.WriteAllText(userDataFile, "");
            File.Delete(userDataFile);

            ModalFuncs.ShowChangeUserdataFolderModal();
        }
        catch (Exception)
        {
            AData.ShowToastLang(ToastType.Info, "Notice", "Toast_RestartRequired");
        }
    }
}
