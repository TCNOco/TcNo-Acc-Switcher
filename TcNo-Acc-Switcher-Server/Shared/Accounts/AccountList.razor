@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@using Newtonsoft.Json.Linq
@using TcNo_Acc_Switcher_Globals
@using System.Collections.ObjectModel
@using TcNo_Acc_Switcher_Server.Shared.Accounts
@using TcNo_Acc_Switcher_Server.Shared.Tooltip
@using TcNo_Acc_Switcher_Server.State.Classes
@using TcNo_Acc_Switcher_Server.State.DataTypes
@using TcNo_Acc_Switcher_Server.State.Interfaces
@inject IJSRuntime JsRuntime
@inject IAppState AppState
@inject ILang Lang
@inject IToasts Toasts
@inject ISteamFuncs SteamFuncs
@inject ITemplatedPlatformFuncs TemplatedPlatformFuncs

@code {
    [Parameter]
    public ObservableCollection<Account> AccountItems { get; set; }

    protected override void OnInitialized()
    {
        AccountItems.CollectionChanged += ((_, _) => OnChangeHandler());
    }
    private async void OnChangeHandler()
    {
        await InvokeAsync(StateHasChanged);
        if (AppState.Switcher.CurrentSwitcher == "Steam")
            _swapAction = async () => await SteamFuncs.SwapToAccount(JsRuntime);
        else
            _swapAction = () => TemplatedPlatformFuncs.SwapToAccount(JsRuntime);
    }

    private Action _swapAction;
}
<div id="acc_list" class="acc_list" tabindex="1" @onkeydown="AccountKeyDown">
    <toastarea class="toastarea"/>
    @foreach (var acc in AccountItems)
    {
        <AccountItem Acc="acc" SwapAction="_swapAction" UnselectAllAccounts="UnselectAllAccounts"/>
    }
</div>

@code
{
    private async Task AccountKeyDown(KeyboardEventArgs args)
    {
        // Handle contextmenu key
        if (args.Key == "ContextMenu")
        {
            await JsRuntime.InvokeVoidAsync("positionAndShowMenu", "#" + AppState.Switcher.SelectedAccount.AccountId, "#AccOrPlatList");
            return;
        }

        // Handle navigation via arrow keys
        if (args.Key is "ArrowLeft" or "ArrowUp") // If left key pressed
        {
            if (AppState.Switcher.SelectedAccount is not null)
            {
                var reversed = AccountItems.Reverse();
                var previous = reversed.SkipWhile(item => item.AccountId != AppState.Switcher.SelectedAccount.AccountId).Skip(1).FirstOrDefault();
                if (previous is not null) SetSelectedAccount(previous);
                return;
            }

            SetSelectedAccount(AccountItems.First());
        }
        else if (args.Key is "ArrowRight" or "ArrowDown")
        {
            if (AppState.Switcher.SelectedAccount is not null)
            {
                var next = AccountItems.SkipWhile(item => item.AccountId != AppState.Switcher.SelectedAccount.AccountId).Skip(1).FirstOrDefault();
                if (next is not null) SetSelectedAccount(next);
                return;
            }

            SetSelectedAccount(AccountItems.First());
        }

        // Everything else requires an account selected
        if (AppState.Switcher.SelectedAccount is null) return;

        // Copy and Switch commands
        switch (args.Key)
        {
            case "Enter":
                _swapAction();
                break;
            case "c" when (args.CtrlKey && args.ShiftKey) || args.AltKey: // Ctrl+Shift+C or Alt+C copy ID
                Toasts.ShowToastLang(ToastType.Info, "Toast_Copied");
                StaticFuncs.CopyText(AppState.Switcher.SelectedAccount.AccountId); // Copy: Acc.AccountId
                break;
            case "c" when (args.CtrlKey): // Ctrl+C copy account name
                Toasts.ShowToastLang(ToastType.Info, "Toast_Copied");
                StaticFuncs.CopyText(AppState.Switcher.SelectedAccount.DisplayName); // Copy: Acc.DisplayName
                break;
        }
    }

    #region Selecting accounts
    /// <summary>
    /// Highlights the specified account
    /// </summary>
    public void SetSelectedAccount(Account acc)
    {
        AppState.Switcher.CurrentStatus = Lang["Status_SelectedAccount", new { name = acc.DisplayName }];
        AppState.Switcher.SelectedAccount = acc;
        UnselectAllAccounts();
        acc.IsChecked = true;
    }

    /// <summary>
    /// Removes highlight from all accounts
    /// </summary>
    public void UnselectAllAccounts()
    {
        foreach (var acc in AccountItems)
        {
            acc.IsChecked = false;
        }
    }
    #endregion
}
