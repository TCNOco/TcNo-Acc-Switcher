@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@using System.Collections.ObjectModel
@using System.ComponentModel
@using TcNo_Acc_Switcher_Globals
@using TcNo_Acc_Switcher_Server.Pages.General
@using TcNo_Acc_Switcher_Server.State
@using TcNo_Acc_Switcher_Server.State.Classes
@using TcNo_Acc_Switcher_Server.State.DataTypes
@using TcNo_Acc_Switcher_Server.State.Interfaces

@code {
    [Parameter]
    public Account Acc { get; set; }
    [Parameter]
    public Action SwapAction { get; set; }
    [Parameter]
    public Action UnselectAllAccounts { get; set; }

    [Inject] IToasts Toasts { get; set; }
    [Inject] ISteamSettings SteamSettings { get; set; }
    [Inject] IAppState AppState { get; set; }
    [Inject] IWindowSettings WindowSettings { get; set; }

    protected override void OnInitialized()
    {
        Acc.PropertyChanged += async (s, e) => await AccOnPropertyChanged(s, e);
    }

    private async Task AccOnPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == "Note") await JsRuntime.InvokeVoidAsync("repositionTooltip", _randomGuid);
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Highlights the specified account
    /// </summary>
    public void SetSelectedAccount(Account acc)
    {
        AppState.Switcher.CurrentStatus = Lang["Status_SelectedAccount", new { name = acc.DisplayName }];
        AppState.Switcher.SelectedAccount = acc;
        UnselectAllAccounts();
        acc.IsChecked = true;
    }

    private readonly string _randomGuid = Guid.NewGuid().ToString();
}

<div class="tooltip-wrapper" id="@_randomGuid">
    @if (!string.IsNullOrEmpty(Acc.TitleText))
    {
        <span id="@_randomGuid">@Acc.TitleText</span>
    }
    <div class="acc_list_item" @onfocus="() => SetSelectedAccount(Acc)" @onclick="() => SetSelectedAccount(Acc)" oncontextmenu="return false;" @onmouseup="(e) => AccountRightClick(e, Acc)" @ondblclick="() => SwapAction()">
        <input type="radio" id="@Acc.AccountId" DisplayName="@Acc.SafeDisplayName" class="acc @(Acc.IsChecked ? "acc_selected" : "")" name="accounts" role="checkbox">
        <label for="@Acc.AccountId" class="acc @Acc.Classes.Label @(Acc.IsCurrent ? "currentAcc" : "")">
            <img class="@Acc.Classes.Image" src="@Acc.ImagePath?@Globals.GetUnixTime()" draggable="false" alt=""/>
            @if (@Acc.Line0 != "")
            {
                <p class="@Acc.Classes.Line0">@Acc.Line0</p>
            }
            @if (AppState.Switcher.CurrentSwitcher == "Steam"
                 && SteamSettings.CustomAccountNames != null
                 && SteamSettings.CustomAccountNames.ContainsKey(Acc.AccountId))
            {
                <h6 class="displayName">@SteamSettings.CustomAccountNames[Acc.AccountId]</h6>
            }
            else
            {
                <h6 class="displayName">@Acc.SafeDisplayName</h6>
            }
            @if (@Acc.Line2 != "")
            {
                <p class="@Acc.Classes.Line2">@Acc.Line2</p>
            }
            @if (@Acc.Line3 != "")
            {
                <p class="@Acc.Classes.Line3">@Acc.Line3</p>
            }
            @if (Acc.Note != "")
            {
                <p class="acc_note">@Acc.Note</p>
            }
            @if (Acc.UserStats.Keys.Count > 0)
            {
                @foreach (var game in Acc.UserStats)
                {
                    var gameName = game.Key;
                    var gameStats = game.Value;
                    foreach (var gameStat in gameStats)
                    {
                        @if (!WindowSettings.GloballyHiddenMetrics[gameName][gameStat.Key])
                        {
                            <h6 class="acc_stat">@(new MarkupString(gameStat.Value.IndicatorMarkup + gameStat.Value.StatValue))</h6>
                        }
                    }
                }
            }
        </label>
    </div>
</div>