@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@page "/Basic/Settings"
@using TcNo_Acc_Switcher_Server.State.Interfaces
@using Microsoft.AspNetCore.Components
@using TcNo_Acc_Switcher_Server.State.DataTypes
@namespace TcNo_Acc_Switcher_Server.Pages.Basic
@inject NavigationManager NavigationManager
@inject IAppState AppState
@inject IJSRuntime JsRuntime
@inject ILang Lang
@inject IGameStats GameStats
@inject ITemplatedPlatformState TemplatedPlatformState
@inject ITemplatedPlatformFuncs TemplatedPlatformFuncs
@inject IWindowSettings WindowSettings
@inject IStatistics Statistics
@inject IToasts Toasts

@code
{
    private Dictionary<string, Dictionary<string, string>> _gamesAndSettings;
}

<div class="container mainblock">
    <div class="row">
        <div class="col-md-12 col-lg-9 col-xl-8 mx-auto settingsCol">
            <toastarea class="toastarea" />


            <h2 class="SettingsHeader">@Lang["Settings_Header_GeneralSettings"]</h2>
            <div class="rowSetting">
                @*<div class="form-check"><input class="form-check-input" type="checkbox" id="DesktopShortcut" @bind="TemplatedPlatformState.CurrentPlatform.PlatformSavedSettings.DesktopShortcut" @onclick="() => Shortcut.DesktopShortcut_Toggle(TemplatedPlatformState.CurrentPlatform.Name, TemplatedPlatformState.CurrentPlatform.PlatformSavedSettings.DesktopShortcut, TemplatedPlatformState.CurrentPlatform.Identifiers[0])"><label class="form-check-label" for="DesktopShortcut"></label></div><label for="DesktopShortcut">*@
                <div class="form-check"><input class="form-check-input" type="checkbox" id="DesktopShortcut" @bind="TemplatedPlatformSettings.DesktopShortcut"><label class="form-check-label" for="DesktopShortcut"></label></div><label for="DesktopShortcut">
		            @Lang["Settings_Shortcut", new { platform = TemplatedPlatformState.CurrentPlatform.Name }]<br></label>
            </div>
            <div>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Admin" @bind="TemplatedPlatformSettings.Admin"><label class="form-check-label" for="Admin"></label></div><label for="Admin">
		            @Lang["Settings_Admin", new { platform = TemplatedPlatformState.CurrentPlatform.Name }]<br></label>
            </div>
            <div>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="AutoStart" @bind="TemplatedPlatformSettings.AutoStart"><label class="form-check-label" for="AutoStart"></label></div><label for="AutoStart">
		            @Lang["Settings_AutoStart", new { platform = TemplatedPlatformState.CurrentPlatform.Name }]<br></label>
            </div>
            <div class="rowSetting rowDropdown">
                <span>@Lang["Settings_Header_ClosingMethod", new { platform = TemplatedPlatformState.CurrentPlatform.Name }]</span>
                <div class="dropdown" data-toggle="tooltip" title="@(Lang["Tooltip_ClosingMethod"])" data-placement="right">
                    <ul class="custom-dropdown-menu dropdown-menu">
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => TemplatedPlatformSettings.SetClosingMethod("Combined")'>Combined (Best)</li>
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => TemplatedPlatformSettings.SetClosingMethod("Close")'>Close</li>
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => TemplatedPlatformSettings.SetClosingMethod("TaskKill")'>TaskKill (Old)</li>
                    </ul>
                    <button class="dropdown-toggle" type="button" data-toggle="dropdown">
                        @TemplatedPlatformSettings.ClosingMethod
                        <span class="caret"></span>
                    </button>
                </div>
            </div>
            <div class="rowSetting rowDropdown">
                <span>@Lang["Settings_Header_StartingMethod", new { platform = TemplatedPlatformState.CurrentPlatform.Name }]</span>
                <div class="dropdown" data-toggle="tooltip" title="@(Lang["Tooltip_StartingMethod"])" data-placement="right">
                    <ul class="custom-dropdown-menu dropdown-menu">
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => TemplatedPlatformSettings.SetStartingMethod("Default")'>Default (Best)</li>
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => TemplatedPlatformSettings.SetStartingMethod("Direct")'>Direct</li>
                    </ul>
                    <button class="dropdown-toggle" type="button" data-toggle="dropdown">
                        @TemplatedPlatformSettings.StartingMethod
                        <span class="caret"></span>
                    </button>
                </div>
            </div>

            <h2 class="SettingsHeader">@Lang["Settings_Header_AccountDisplay"]</h2>
            <div class="rowSetting">
                <div class="form-check"><input class="form-check-input" type="checkbox" id="ShowShortNotes" @bind="TemplatedPlatformSettings.ShowShortNotes"><label class="form-check-label" for="ShowShortNotes"></label></div><label for="ShowShortNotes">
                    @Lang["Settings_ShowShortNotes"]<br></label>
            </div>



            <h2 class="SettingsHeader">@Lang["Settings_Header_TraySettings"]</h2>
            <div class="form-text"><span>@Lang["Settings_TrayMax"]</span><input type="number" id="TrayAccNumber" min="0" max="365" @bind="TemplatedPlatformSettings.TrayAccNumber"></div>


            <h2 class="SettingsHeader">@Lang["Settings_Header_GeneralTools"]</h2>
            <p>@Lang["Settings_CurrentLocation", new { path = TemplatedPlatformSettings.FolderPath }]</p>
            <div class="buttoncol"><button id="PickFolder" type="button" @onclick="PickFolder"><span>@Lang["Settings_PickFolder", new { platform = TemplatedPlatformState.CurrentPlatform.Name }]</span></button><button id="OpenFolder" type="button" @onclick="() => AppState.OpenFolder(TemplatedPlatformSettings.FolderPath)"><span>@Lang["Settings_OpenFolder", new { platform = TemplatedPlatformState.CurrentPlatform.Name }]</span></button></div>
            <div class="buttoncol"><button id="ResetSettings" type="button" @onclick="ClearSettings"><span>@Lang["Button_ResetSettings"]</span></button>
                @if (TemplatedPlatformState.CurrentPlatform.Extras.CachePaths != null)
                {
                    <button id="ClearCache" type="button" @onclick="TemplatedPlatformFuncs.ClearCache" data-toggle="tooltip" title="@(GetCacheList())" data-html="true"><span>@Lang["Platform_ClearCache"]</span></button>
                }
            </div>

            @if (TemplatedPlatformState.CurrentPlatform.Extras.BackupPaths.Count > 0)
            {
                <h2 class="SettingsHeader">@Lang["Settings_Header_BackupRestore"]</h2>

                <div class="buttoncol">
                    @if (TemplatedPlatformState.CurrentPlatform.Extras.BackupFileTypesInclude.Count != 0 || TemplatedPlatformState.CurrentPlatform.Extras.BackupFileTypesIgnore.Count != 0){
                        <button id="Backup" type="button" @onclick="() => BackupButton()" data-toggle="tooltip" title="@(Lang["Tooltip_Backup"])" data-placement="bottom"><span>@Lang["Button_Backup"]</span></button>
                    }

                    <button id="BackupEverything" type="button" @onclick="() => BackupButton(true)" data-toggle="tooltip" title="@(Lang["Tooltip_BackupAll"])" data-placement="bottom"><span>@Lang["Button_BackupAll"]</span></button>

                    @if (TemplatedPlatformState.CurrentPlatform.Extras.BackupFileTypesInclude.Count == 0 && TemplatedPlatformState.CurrentPlatform.Extras.BackupFileTypesIgnore.Count == 0) {
                        <button id="OpenBackupFolder" type="button" @onclick="OpenBackupFolder"><span>@Lang["Button_OpenBackup"]</span></button>
                    }
                </div>
                <div class="buttoncol">

                    @if (TemplatedPlatformState.CurrentPlatform.Extras.BackupFileTypesInclude.Count != 0 || TemplatedPlatformState.CurrentPlatform.Extras.BackupFileTypesIgnore.Count != 0) {
                        <button id="OpenBackupFolder" type="button" @onclick="OpenBackupFolder"><span>@Lang["Button_OpenBackup"]</span></button>
                    }

                    <div class="button" id="Restore" type="button" data-toggle="tooltip" title="@(Lang["Tooltip_Restore"])" data-placement="bottom">
                        <InputFile OnChange="@RestoreFile"/>
                        <span>@Lang["Button_Restore"]</span>
                    </div>
                </div>
            }

            <div class="buttoncol col_close"><button class="btn_close" type="button" @onclick="SaveAndClose"><span>@Lang["Button_Close"]</span></button></div>

            @if (_gamesAndSettings.Count > 0)
            {
                <h2 class="SettingsHeader">@Lang["Settings_Header_GameStats"]</h2>
                <p>@Lang["Settings_GameStats"]</p>
                @foreach (var (game, settings) in _gamesAndSettings)
                {
                    <h3 class="SettingsHeader">@game</h3>
                @*@foreach (var (metricId, (hidden, metricText)) in settings)*@
                    @foreach (var (metricId, metricText) in settings)
                    {
                        <div class="form-check mb-2">
                            @*<input class="form-check-input @GameStats.Instance.GetGameIdFromName(game)_Checkboxes" @bind="WindowSettings.GloballyHiddenMetrics[game]." type="checkbox" id="@metricId" checked="@hidden"><label class="form-check-label" for="@metricId"></label><label for="@metricId">@metricText<br></label>*@
                            <input class="form-check-input" @bind="WindowSettings.GloballyHiddenMetrics[game][metricId]" type="checkbox" id="@metricId"><label class="form-check-label" for="@metricId"></label><label for="@metricId">@metricText<br></label>
                        </div>
                    }
                }
                <div class="buttoncol col_close"><button class="btn_close" type="button" @onclick="SaveAndClose"><span>@Lang["Button_Close"]</span></button></div>
            }

            <SharedSettings />
            <div class="buttoncol col_close"><button class="btn_close" type="button" @onclick="SaveAndClose"><span>@Lang["Button_Close"]</span></button></div>
        </div>
    </div>
</div>
<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code
{
    protected override async Task OnParametersSetAsync()
    {
        await GameStats.SetCurrentPlatform(TemplatedPlatformState.CurrentPlatform.SafeName);
        _gamesAndSettings = GameStats.GetAllCurrentlyEnabledGames().ToDictionary(game => game, GameStats.GetAllMetrics);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Statistics.NewNavigation($"/[{TemplatedPlatformState.CurrentPlatform.SafeName}]/Settings");
        if (firstRender) await JsRuntime.InvokeVoidAsync("initSavingHotKey");
        StaticFuncs.SaveSettings = SaveSettings;
    }

    public void SaveAndClose()
    {
        WindowSettings.Save();
        TemplatedPlatformSettings.Save();

        NavigationManager.NavigateTo("/Basic");
    }

    private string GetCacheList()
    {
        var listOfFiles = new List<string>(TemplatedPlatformState.CurrentPlatform.Extras.CachePaths);
        return Lang["FileFoldersToClear"] + "<br>" + string.Join("<br>", listOfFiles.Select(x => x.Replace("Platform_Folder", TemplatedPlatformState.CurrentPlatform.Name)).ToList());
    }

    // Allow saving of shortcut position.
    // This has to be done as only Static funcs can be invoked by JS.
    // Save settings with Ctrl+S Hot key
    private void SaveSettings()
    {
        WindowSettings.Save();
        TemplatedPlatformSettings.Save();
        Toasts.ShowToastLang(ToastType.Success, "Saved");
    }
}
