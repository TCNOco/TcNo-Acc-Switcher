@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@page "/Basic/"
@using TcNo_Acc_Switcher_Server.Data
@using TcNo_Acc_Switcher_Server.Data.Settings
@using TcNo_Acc_Switcher_Server.Pages.General
@using TcNo_Acc_Switcher_Server.Shared.ContextMenu
@using TcNo_Acc_Switcher_Server.Shared.Accounts
@using System.IO
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.WebUtilities
@using TcNo_Acc_Switcher_Server.Shared.Modal
@using TcNo_Acc_Switcher_Server.State
@using TcNo_Acc_Switcher_Server.State.Interfaces
@inject IJSRuntime JsRuntime
@inject IAppState AppState
@inject NavigationManager NavManager
@inject NewLang Lang

<ContextMenu MenuItems="@Basic.ContextMenuItems" ContextMenuId="AccOrPlatList"/>
<ContextMenu MenuItems="@Basic.ContextMenuShortcutItems" ContextMenuId="Shortcuts"/>
<ContextMenu MenuItems="@Basic.ContextMenuPlatformItems" ContextMenuId="Platform"/>

<AccountList AccountItems="@AppData.BasicAccounts" @ref="BasicAccountList" />

<div class="shortcutDropdown gameShortcuts" id="shortcutDropdown" style="display: none">
    <div class="shortcutDropdownItems">
        @foreach (var (i, shortcut) in Basic.Shortcuts)
        {
            @if (i >= 0)
            {
                <button class="HasContextMenu" id="@(shortcut)" @onclick="() => Basic.RunShortcut(shortcut, platform: CurrentPlatform.SafeName)" data-toggle="tooltip" title="@(RemoveShortcutExt(shortcut))">
                    <img src="@(CurrentPlatform.GetShortcutImagePath(shortcut))" alt="@(shortcut[0])"/>
                </button>
            }
        }
    </div>
    <button id="btnOpenShortcutFolder" @onclick="() => AppState.OpenFolder(Path.GetFullPath(CurrentPlatform.ShortcutFolder))" data-toggle="tooltip" title="@(Lang["Tooltip_ShortcutFolder"])" data-placement="right">
        <i class="fas fa-plus"></i>
    </button>
</div>

<div class="acc_list_actionbar">
    <div class="statusBar">
        <div></div><input id="CurrentStatus" @bind="AppData.CurrentStatus" spellcheck="false" disabled>
    </div>
    <div class="gameShortcuts">
        <div class="shortcuts">
            @foreach (var (i, shortcut) in Basic.Shortcuts)
            {
                @if (i < 0)
                {
                    <button class="HasContextMenu" id="@(shortcut)" @onclick="() => Basic.RunShortcut(shortcut, platform: CurrentPlatform.SafeName)" data-toggle="tooltip" title="@(RemoveShortcutExt(shortcut))">
                        <img src="@(CurrentPlatform.GetShortcutImagePath(shortcut))" alt="@(shortcut[0])"/>
                    </button>
                }
            }
        </div>
        <button id="shortcutDropdownBtn" onclick="shortcutDropdownBtnClick()" data-toggle="tooltip" title="@(Lang["Tooltip_ExpandShortcuts"])" data-placement="right">
            <i class="fas fa-chevron-up"></i>
        </button>

        @if (CurrentPlatform.ShortcutIncludeMainExe)
        {
            <button id="btnStartPlat" @onclick="Basic.RunPlatform" data-toggle="tooltip" title="@(CurrentPlatform.SafeName)">
                <img src="@(CurrentPlatform.GetShortcutImagePath(CurrentPlatform.SafeName))" alt="Start platform"/>
            </button>
        }

        <button id="btnAddNew" @onclick="() => AppFuncs.SwapToNewAccount()">
            <i class="fas fa-plus footerIcoInline"></i>
            <span>@Lang["Button_AddNew"]</span>
        </button>
        <button id="btnAddCurrent" @onclick="ModalFuncs.ShowSetAccountStringModal">
            <i class="fas fa-save footerIcoInline"></i>
            <span>@Lang["Button_SaveCurrent"]</span>
        </button>
        <button class="btn_login" id="btnLogin" @onclick="() => AppFuncs.SwapToAccount()">
            <span>@Lang["Button_Login"]</span>
            <i class="fas fa-caret-right footerIcoInline"></i>
        </button>

        <button class="btnSettings" @onclick='() => AppData.NavigateTo("/Basic/Settings/")' data-toggle="tooltip" title="@(Lang["Tooltip_Settings"])">
            <i class="fas fa-cog footerIcoSettings"></i>
        </button>

        <button class="btnHelp" @onclick='() => ModalData.ShowModal("info")' data-toggle="tooltip" title="@(Lang["Tooltip_Info"])">
            <i class="fas fa-question footerIcoQuestion"></i>
        </button>
    </div>

</div>


@code
{
    public static AccountList BasicAccountList;

    protected override void OnInitialized()
    {
        AppData.Instance.OnChange += OnChangeHandler;
    }
    private async void OnChangeHandler()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AppData.Instance.OnChange -= OnChangeHandler;
    }

    private string RemoveShortcutExt(string s)
    {
        return s.Replace(".lnk", "").Replace(".url", "");
    }

    // https://github.com/dotnet/aspnetcore/issues/13582
    private bool _navBack;


    // This has to be here for NavManager.
    // This is run before everything is painted on, so that it can get the correct values for the CSS Block.
    protected override async Task OnParametersSetAsync()
    {
        AppState.Stylesheet.StreamerModeCheck();

        var requestPlat = "";
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("plat", out var param))
        {
            requestPlat = param.First();
        }

        // Get platform name from URI if not set.
        if (!string.IsNullOrEmpty(requestPlat))
            BasicPlatforms.SetCurrentPlatform(requestPlat);

        // If current platform is NOT valid -> Go back
        if (!CurrentPlatform.IsInit)
        {
            _navBack = true;
            return;
        }

        await BasicStats.SetCurrentPlatform(CurrentPlatform.SafeName);

    // Verify that the platform's EXE exists, otherwise go back. For shortcuts and direct navigation.
        if (File.Exists(Basic.Exe())) return;
        _navBack = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_navBack)
        {
            AppData.ReloadWithToast("error", Lang["Error"], Lang.Instance["Toast_FailedLoad", new {platform = CurrentPlatform.FullName}]);
            return;
        }
        await GeneralFuncs.HandleFirstRender(firstRender, CurrentPlatform.FullName);
        AppStats.NewNavigation($"/[{CurrentPlatform.SafeName}]");
        if (!firstRender) return;
        await AppData.InvokeVoidAsync("initCopyHotKey");
        await AppData.InvokeVoidAsync("showNoteTooltips");

        var curAcc = await BasicSwitcherFuncs.GetCurrentAccountId();
        if (curAcc != "") await AccountFuncs.SetCurrentAccount(curAcc);
    }
}