@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@page "/Basic/"
@using TcNo_Acc_Switcher_Server.Shared.ContextMenu
@using TcNo_Acc_Switcher_Server.Shared.Accounts
@using System.IO
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.WebUtilities
@using TcNo_Acc_Switcher_Server.State
@using TcNo_Acc_Switcher_Server.State.DataTypes
@using TcNo_Acc_Switcher_Server.State.Interfaces
@using TcNo_Acc_Switcher_Server.Shared.Tooltip
@using System.ComponentModel
@using TcNo_Acc_Switcher_Globals
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject ISharedFunctions SharedFunctions
@inject ITemplatedPlatformState TemplatedPlatformState
@inject ITemplatedPlatformFuncs TemplatedPlatformFuncs
@inject ITemplatedPlatformSettings TemplatedPlatformSettings
@inject IAppState AppState
@inject ILang Lang
@inject IModals Modals
@inject IGameStats GameStats
@inject IToasts Toasts
@inject IStatistics Statistics
@inject IWindowSettings WindowSettings

<ContextMenu MenuItems="@TemplatedPlatformState.ContextMenu.ContextMenuItems" ContextMenuId="AccOrPlatList"/>
<ContextMenu MenuItems="@TemplatedPlatformState.ContextMenu.ContextMenuShortcutItems" ContextMenuId="Shortcuts"/>
<ContextMenu MenuItems="@TemplatedPlatformState.ContextMenu.ContextMenuPlatformItems" ContextMenuId="Platform"/>

<AccountList AccountItems="@AppState.Switcher.TemplatedAccounts" @ref="BasicAccountList" />

<div class="shortcutDropdown gameShortcuts" id="shortcutDropdown" style="display: none">
    <div class="shortcutDropdownItems">
        @foreach (var (i, shortcut) in TemplatedPlatformSettings.Shortcuts)
        {
            @if (i >= 0)
            {
                <Tooltip Text="@Globals.RemoveShortcutExt(shortcut)">
                    <button class="HasContextMenu" id="@(shortcut)" @onclick="(e) => ShortcutClick(e, shortcut)" @onmouseup="(e) => ShortcutClick(e, shortcut)">
                        <img src="@(TemplatedPlatformState.CurrentPlatform.GetShortcutImagePath(shortcut))" alt="@(shortcut[0])"/>
                    </button>
                </Tooltip>
            }
        }
    </div>
    <Tooltip Text="@(Lang["Tooltip_ShortcutFolder"])" Id="btnOpenShortcutFolder">
        <button @onclick="() => AppState.OpenFolder(Path.GetFullPath(TemplatedPlatformState.CurrentPlatform.ShortcutFolder))">
            <i class="fas fa-plus"></i>
        </button>
    </Tooltip>
</div>

<div class="acc_list_actionbar">
    <div class="statusBar">
        <div></div><input id="CurrentStatus" @bind="AppState.Switcher.CurrentStatus" spellcheck="false" disabled>
    </div>
    <div class="gameShortcuts">
        <div class="shortcuts">
            @foreach (var (i, shortcut) in TemplatedPlatformSettings.Shortcuts)
            {
                @if (i < 0)
                {
                    <Tooltip Text="@Globals.RemoveShortcutExt(shortcut)">
                        <button class="HasContextMenu" id="@(shortcut)" @onclick="(e) => ShortcutClick(e, shortcut)" @onmouseup="(e) => ShortcutClick(e, shortcut)">
                            <img src="@(TemplatedPlatformState.CurrentPlatform.GetShortcutImagePath(shortcut))" alt="@(shortcut[0])"/>
                        </button>
                    </Tooltip>
                }
            }
        </div>
        <Tooltip Text="@(Lang["Tooltip_ExpandShortcuts"])">
            <button id="shortcutDropdownBtn" onclick="shortcutDropdownBtnClick()"><i class="fas fa-chevron-up"></i></button>
        </Tooltip>

        @if (TemplatedPlatformState.CurrentPlatform.Extras.ShortcutIncludeMainExe)
        {
            <Tooltip Text="@(TemplatedPlatformState.CurrentPlatform.SafeName)">
                <button id="btnStartPlat" @onmousedown="RunPlatform" oncontextmenu="return false;">
                    <img src="@(TemplatedPlatformState.CurrentPlatform.GetShortcutImagePath(TemplatedPlatformState.CurrentPlatform.SafeName))" alt="RUN"/>
                </button>
            </Tooltip>
        }

        <button id="btnAddNew" @onclick="() => TemplatedPlatformFuncs.SwapToNewAccount(JsRuntime)">
            <i class="fas fa-plus footerIcoInline"></i>
            <span>@Lang["Button_AddNew"]</span>
        </button>
        <button id="btnAddCurrent" @onclick="ShowSetAccountStringModal">
            <i class="fas fa-save footerIcoInline"></i>
            <span>@Lang["Button_SaveCurrent"]</span>
        </button>
        <button class="btn_login" id="btnLogin" @onclick="() => TemplatedPlatformFuncs.SwapToAccount(JsRuntime)">
            <span>@Lang["Button_Login"]</span>
            <i class="fas fa-caret-right footerIcoInline"></i>
        </button>

        <Tooltip Text="@(Lang["Tooltip_Settings"])">
            <button class="btnSettings" @onclick='() => AppState.Navigation.NavigateTo(NavigationManager, "/Basic/Settings/")'>
                <i class="fas fa-cog footerIcoSettings"></i>
            </button>
        </Tooltip>

        <Tooltip Text="@(Lang["Tooltip_Info"])">
            <button class="btnHelp" @onclick='() => Modals.ShowModal("info")'>
                <i class="fas fa-question footerIcoQuestion"></i>
            </button>
        </Tooltip>
    </div>

</div>


@code
{
    public static AccountList BasicAccountList;

    protected override void OnInitialized()
    {
        AppState.Switcher.PropertyChanged += OnChangeHandler;
    }
    private async void OnChangeHandler(object? o, PropertyChangedEventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    private string RemoveShortcutExt(string s)
    {
        return s.Replace(".lnk", "").Replace(".url", "");
    }

    // https://github.com/dotnet/aspnetcore/issues/13582
    private bool _navBack;

    /// <summary>
    /// Show the Set App Password modal
    /// </summary>
    public void ShowSetAccountStringModal()
    {
        Modals.TextInput = new TextInputRequest(TextInputGoal.AccString);
        Modals.ShowModal("getText");
    }

    // This has to be here for NavManager.
    // This is run before everything is painted on, so that it can get the correct values for the CSS Block.
    protected override async Task OnParametersSetAsync()
    {
        AppState.Stylesheet.StreamerModeCheck();

        var requestPlat = "";
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("plat", out var param))
        {
            requestPlat = param.First();
        }

        // Get platform name from URI if not set.
        if (!string.IsNullOrEmpty(requestPlat))
            await TemplatedPlatformState.SetCurrentPlatform(JsRuntime, TemplatedPlatformSettings, requestPlat);

        // If current platform is NOT valid -> Go back
        if (!TemplatedPlatformState.CurrentPlatform.IsInit)
        {
            _navBack = true;
            return;
        }

        await GameStats.SetCurrentPlatform(TemplatedPlatformState.CurrentPlatform.SafeName);

    // Verify that the platform's EXE exists, otherwise go back. For shortcuts and direct navigation.
        if (File.Exists(TemplatedPlatformSettings.Exe)) return;
        _navBack = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_navBack)
        {
            Toasts.ShowToastLang(ToastType.Error, "Error", new LangSub	("Toast_FailedLoad", new {platform = TemplatedPlatformState.CurrentPlatform.Name}));
            return;
        }
        await HandleFirstRender(firstRender);
        Statistics.NewNavigation($"/[{TemplatedPlatformState.CurrentPlatform.SafeName}]");
        if (!firstRender) return;

        TemplatedPlatformState.LoadTemplatedPlatformState(JsRuntime, TemplatedPlatformSettings, TemplatedPlatformFuncs);


        await JsRuntime.InvokeVoidAsync("showNoteTooltips");

        var curAcc = await TemplatedPlatformFuncs.GetCurrentAccountId();
        if (curAcc != "") await TemplatedPlatformFuncs.SetCurrentAccount(JsRuntime, curAcc);
    }


    public async Task HandleFirstRender(bool firstRender)
    {
        if (firstRender)
        {
            AppState.WindowState.WindowTitle = Lang["Title_AccountsList", new { platform = TemplatedPlatformState.CurrentPlatform.Name }];
            // Handle Streamer Mode notification
            if (WindowSettings.StreamerModeEnabled && AppState.Stylesheet.StreamerModeTriggered)
                Toasts.ShowToastLang(ToastType.Info, "Toast_StreamerModeTitle", "Toast_StreamerModeHint");

            // Handle queries and invoke status "Ready"
            await HandleQueries();
            await JsRuntime.InvokeVoidAsync("updateStatus", Lang["Done"]);
        }
    }

    /// <summary>
    /// For handling queries in URI
    /// </summary>
    public async Task<bool> HandleQueries()
    {
        Globals.DebugWriteLine(@"[JSInvoke:General\GeneralFuncs.HandleQueries]");
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        // Clear cache reload
        var queries = QueryHelpers.ParseQuery(uri.Query);
        // cacheReload handled in JS

        // Toast
        if (!queries.TryGetValue("toast_type", out var toastType) ||
            !queries.TryGetValue("toast_title", out var toastTitle) ||
            !queries.TryGetValue("toast_message", out var toastMessage)) return true;
        for (var i = 0; i < toastType.Count; i++)
        {
            try
            {
                var type = (ToastType)Enum.Parse(typeof(ToastType), toastType[i]);
                Toasts.ShowToastLang(type, toastTitle[i], toastMessage[i]);
                await JsRuntime.InvokeVoidAsync("removeUrlArgs", "toast_type,toast_title,toast_message");
            }
            catch (TaskCanceledException e)
            {
                Globals.WriteToLog(e.ToString());
            }
        }

        return true;
    }

    private async Task ShortcutClick(MouseEventArgs e, string shortcut)
    {
        switch (e.Button)
        {
            case 0 when e.Type == "click":
                // Left click
                SharedFunctions.RunShortcut(shortcut, TemplatedPlatformState.CurrentPlatform.ShortcutFolder, TemplatedPlatformState.CurrentPlatform.SafeName);
                break;
            case 2:
                // Right click
                AppState.Switcher.CurrentShortcut = shortcut;
                await JsRuntime.InvokeVoidAsync("positionAndShowMenu", e, "#Shortcuts");
                break;
        }
    }

    private async Task RunPlatform(MouseEventArgs e)
    {
        switch (e.Button)
        {
            case 0:
                // Left click
                TemplatedPlatformFuncs.RunPlatform();
                break;
            case 2:
                // Right click
                await JsRuntime.InvokeVoidAsync("positionAndShowMenu", e, "#Platform");
                break;
        }
    }
}