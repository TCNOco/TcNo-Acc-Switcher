@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@page "/"
@using TcNo_Acc_Switcher_Server.Data
@using TcNo_Acc_Switcher_Server.Pages.General
@using System.Globalization
@using System.IO
@using TcNo_Acc_Switcher_Globals
@using TcNo_Acc_Switcher_Server.Shared.ContextMenu
@inject IJSRuntime JsRuntime
@{ AData.SetActiveIJsRuntime(JsRuntime); }
@inject NavigationManager NavManager
@{ AData.SetActiveNavMan(NavManager); }
@inject AppData AData

@inject Lang Locale

@if (AppSettings.PreRenderUpdate)
{
    <div class="updateBar">
        <span>@Locale["Update"]</span>
        <i class="fas fa-times-circle" id="closeUpdateBar"></i>
    </div>
}

@code
{
    private static string _imagePath(AppSettings.PlatformItem platform) => Path.Join(Globals.UserDataFolder, $"wwwroot\\img\\platform\\{platform.SafeName}.svg");
}

<ContextMenu MenuItems="@AppSettings.PlatformContextMenuItems" ContextMenuId="AccOrPlatList" />
<div class="platformTable">
    <div class="platform_list">
        @foreach (var platform in AppSettings.Platforms.Where(x => x.Enabled))
        {
            <div class="platform_list_item" id="@(platform.Identifier)" @onclick="() => Check(platform.Name)" @onmouseup="(e) => PlatformRightClick(e, platform.Name)" oncontextmenu="return false;">
                <div class="fgText @(!File.Exists(_imagePath(platform)) ? "noImageCenterText" : "") @(platform.Name.Length < 7 ? "shortText" : platform.Name.Length > 12 ? "longText" : "")"><p>@platform.Name.ToUpper(CultureInfo.InvariantCulture)</p></div>
                <div class="fgImg">
                    @if(File.Exists(_imagePath(platform)))
                    {
                        <svg viewBox="0 0 500 500" draggable="false" alt="@(platform.SafeName)">
                            <use href="@($"img/platform/{platform.SafeName}.svg#FG")" class="@("icoFG")"></use>
                        </svg>
                    }
                </div>
                <svg viewBox="0 0 2084 2084" draggable="false" alt="@(platform)" class="@("icoBG")">
                    <use href="img/platform/glass.svg#GLASS" class="icoGlass @("icoGlass")"></use>
                </svg>
            </div>
        }
    </div>
</div>

<div class="acc_list_actionbar">
    <div>
        @*<button id="btnTextEditor" onclick="location = 'TextEditor'">
            <i class="fas fa-cog footerIcoSettings"></i>
        </button>*@
        <button id="btnPlatforms" @onclick='() => AppData.NavigateTo("/Platforms/")' data-toggle="tooltip" title="@(Locale["Tooltip_ManagePlatforms"])">
            <i class="fas fa-plus footerIcoInline"></i>
            @Lang["Button_ManagePlatforms"]
        </button>
        <button class="btnSettings" @onclick='() => AppData.NavigateTo("/Settings/")' data-toggle="tooltip" title="@(Locale["Tooltip_Settings"])">
            <i class="fas fa-cog footerIcoSettings"></i>
        </button>
        <button class="btnHelp" @onclick='() => ModalData.ShowModal("info")' data-toggle="tooltip" title="@(Locale["Tooltip_Info"])">
            <i class="fas fa-question footerIcoQuestion"></i>
        </button>
    </div>
</div>

@code
{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        AppData.WindowTitle = "TcNo Account Switcher";
        AppSettings.Platforms.CollectionChanged += (_, _) => InvokeAsync(StateHasChanged);

        // If no platforms are showing:
        if (AppSettings.Platforms.All(x => !x.Enabled))
        {
            NavManager.NavigateTo("Platforms");
        }

        // If just 1 platform is showing, and first launch: Nav into:
        if (AppData.FirstMainMenuVisit && AppSettings.Platforms.Count(x => x.Enabled) == 1)
        {
            AppData.FirstMainMenuVisit = false;
            var onlyPlatform = AppSettings.Platforms.First(x => x.Enabled);
            await Check(onlyPlatform.Name);
        }
        AppData.FirstMainMenuVisit = false;

        if (firstRender)
        {
            await GeneralFuncs.HandleQueries();
            //await AppData.InvokeVoidAsync("initContextMenu");
            await AppData.InvokeVoidAsync("initPlatformListSortable");
            //await AData.InvokeVoidAsync("initAccListSortable");
        }

        AppData.FirstLaunchCheck();

        AppStats.NewNavigation("/");
    }

    #region Context menu
    /// <summary>
    /// Shows the context menu for the requested platform
    /// </summary>
    public static async void PlatformRightClick(MouseEventArgs e, string plat)
    {
        if (e.Button != 2) return;
        AppData.SelectedPlatform = plat;
        await AppData.InvokeVoidAsync("positionAndShowMenu", e, "#AccOrPlatList");
    }
    #endregion
}