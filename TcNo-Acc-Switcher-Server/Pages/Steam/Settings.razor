@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@page "/Steam/Settings"
@using TcNo_Acc_Switcher_Server.Data
@using TcNo_Acc_Switcher_Server.Data.Settings
@using TcNo_Acc_Switcher_Server.Pages.General
@using TcNo_Acc_Switcher_Server.Pages.General.Classes
@using System.Diagnostics
@using System.IO
@using TcNo_Acc_Switcher_Globals
@using System.Threading
@using Microsoft.AspNetCore.Components
@using TcNo_Acc_Switcher_Server.Shared.Toast
@using TcNo_Acc_Switcher_Server.State
@using TcNo_Acc_Switcher_Server.State.DataTypes
@using TcNo_Acc_Switcher_Server.State.Interfaces
@namespace TcNo_Acc_Switcher_Server.Pages.Steam
@inject NavigationManager NavManager
@inject SteamSettings SteamSettings
@inject SteamState SteamState
@inject IWindowSettings WindowSettings
@inject IJSRuntime JsRuntime
@inject IAppState AppState
@inject NewLang Lang


@code
{
    private const string Platform = "Steam";
    //private readonly Dictionary<string, Dictionary<string, Tuple<bool, string>>> _gamesAndSettings = BasicStats.GetAllCurrentlyEnabledGames().ToDictionary(game => game, BasicStats.GetAllMetrics);
    private readonly Dictionary<string, Dictionary<string, string>> _gamesAndSettings = BasicStats.GetAllCurrentlyEnabledGames().ToDictionary(game => game, BasicStats.GetAllMetrics);
}

<div class="container mainblock">
    <div class="row">
        <div class="col-md-12 col-lg-9 col-xl-8 mx-auto settingsCol">
            <toastarea class="toastarea" />
            <h1 class="SettingsHeader">@Lang["Settings_Header_Platform", new{ platformName = "Steam"}]</h1>

            <h2 class="SettingsHeader">@Lang["Settings_Header_GeneralSettings"]</h2>
            <div class="rowSetting">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="Steam_DesktopShortcut" @bind="SteamState.DesktopShortcut"><label class="form-check-label" for="Steam_DesktopShortcut"></label>
                </div>
                <label for="Steam_DesktopShortcut">@Lang["Settings_Shortcut", new { platform = Platform }]<br></label>
            </div>
            <div class="rowSetting">
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_Admin" @bind="SteamSettings.Admin"><label class="form-check-label" for="Steam_Admin"></label></div><label for="Steam_Admin">@Lang["Settings_Admin", new { platform = Platform }]<br></label>
            </div>
            <div>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="AutoStart" @bind="SteamSettings.AutoStart"><label class="form-check-label" for="AutoStart"></label></div><label for="AutoStart">
                    @Lang["Settings_AutoStart", new { platform = "Steam" }]<br></label>
            </div>
            <div class="rowSetting">
                <div class="form-check"><input class="form-check-input" type="checkbox" id="StartSilent" disabled="@(!SteamSettings.AutoStart)" @bind="SteamSettings.StartSilent"><label class="form-check-label" for="StartSilent"></label></div><label for="StartSilent">@Lang["Steam_StartSilent"]<br></label>
            </div>
            <div class="rowSetting rowDropdown">
                <span>@Lang["Settings_Header_ClosingMethod", new { platform = "Steam" }]</span>
                <div class="dropdown" data-toggle="tooltip" title="@(Lang["Tooltip_ClosingMethod"])" data-placement="right">
                    <ul class="custom-dropdown-menu dropdown-menu">
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => SteamSettings.SetClosingMethod("Combined")'>Combined (Best)</li>
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => SteamSettings.SetClosingMethod("Close")'>Close</li>
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => SteamSettings.SetClosingMethod("TaskKill")'>TaskKill (Old)</li>
                    </ul>
                    <button class="dropdown-toggle" type="button" data-toggle="dropdown">
                        @SteamSettings.ClosingMethod
                        <span class="caret"></span>
                    </button>
                </div>
            </div>
            <div class="rowSetting rowDropdown">
                <span>@Lang["Settings_Header_StartingMethod", new { platform = "Steam" }]</span>
                <div class="dropdown" data-toggle="tooltip" title="@(Lang["Tooltip_StartingMethod"])" data-placement="right">
                    <ul class="custom-dropdown-menu dropdown-menu">
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => SteamSettings.SetStartingMethod("Default")'>Default (Best)</li>
                        <li class="custom-dropdown-item dropdown-item" @onclick='() => SteamSettings.SetStartingMethod("Direct")'>Direct</li>
                    </ul>
                    <button class="dropdown-toggle" type="button" data-toggle="dropdown">
                        @SteamSettings.StartingMethod
                        <span class="caret"></span>
                    </button>
                </div>
            </div>

            <div>
                <div class="rowSetting rowDropdown">
                    <span>@Lang["Steam_OverrideDefaultState"]</span>
                    <div class="dropdown">
                        <ul class="custom-dropdown-menu dropdown-menu">
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(-1)">@Lang["NoDefault"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(1)">@Lang["Online"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(7)">@Lang["Invisible"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(0)">@Lang["Offline"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(2)">@Lang["Busy"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(3)">@Lang["Away"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(4)">@Lang["Snooze"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(5)">@Lang["LookingToTrade"]</li>
                            <li class="custom-dropdown-item dropdown-item" @onclick="() => DefaultState(6)">@Lang["LookingToPlay"]</li>
                        </ul>
                        <button class="dropdown-toggle" type="button" data-toggle="dropdown">
                            @_selectedState
                            <span class="caret"></span>
                        </button>
                    </div>
                </div>
            </div>
            <div class="form-text"><span>@Lang["Settings_ImageExpiry"]</span><input type="number" id="Steam_ImageExpiryTime" min="0" max="365" @bind="SteamSettings.ImageExpiryTime"></div>
            <div class="form-text"><span>@Lang["Settings_SteamAPIKey"]</span><input type="text" id="Steam_SteamAPIKey" @bind="SteamSettings.SteamWebApiKey" spellcheck="false"><p class="subtext">@Lang["Settings_SteamAPIKey_Note"]</p></div>

            <h2 class="SettingsHeader">@Lang["Settings_Header_AccountDisplay"]</h2>
            <div>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_ShowAccUsername" @bind="SteamSettings.ShowAccUsername"><label class="form-check-label" for="Steam_ShowAccUsername"></label></div><label for="Steam_ShowAccUsername">@Lang["Steam_ShowAccUsername"]<br></label>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_ShowSteamID" @bind="SteamSettings.ShowSteamId"><label class="form-check-label" for="Steam_ShowSteamID"></label></div><label for="Steam_ShowSteamID">@Lang["Steam_ShowSteamID"]<br></label>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_ShowLastLogin" @bind="SteamSettings.ShowLastLogin"><label class="form-check-label" for="Steam_ShowLastLogin"></label></div><label for="Steam_ShowLastLogin">@Lang["Steam_ShowLastLogin"]<br></label>
            </div>
            <div>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_ShowVAC" @bind="SteamSettings.ShowVac"><label class="form-check-label" for="Steam_ShowVAC"></label></div><label for="Steam_ShowVAC">@Lang["Steam_ShowVac"]<br></label>
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_ShowLimited" @bind="SteamSettings.ShowLimited"><label class="form-check-label" for="Steam_ShowLimited"></label></div><label for="Steam_ShowLimited">@Lang["Steam_ShowLimited"]<br></label>
            </div>
            <div class="rowSetting">
                <div class="form-check"><input class="form-check-input" type="checkbox" id="ShowShortNotes" @bind="SteamSettings.ShowShortNotes"><label class="form-check-label" for="ShowShortNotes"></label></div><label for="ShowShortNotes">@Lang["Settings_ShowShortNotes"]<br></label>
            </div>


            <h2 class="SettingsHeader">@Lang["Settings_Header_TraySettings"]</h2>
            <div class="rowSetting">
                <div class="form-check"><input class="form-check-input" type="checkbox" id="Steam_TrayAccountName" @bind="SteamSettings.TrayAccountName"><label class="form-check-label" for="Steam_TrayAccountName"></label></div><label for="Steam_TrayAccountName">@Lang["Steam_Tray_AccountName"]<br></label>
            </div>
            <div class="form-text"><span>@Lang["Settings_TrayMax"]</span><input type="number" id="Steam_TrayAccNumber" min="0" max="365" @bind="SteamSettings.TrayAccNumber"></div>


            <h2 class="SettingsHeader">@Lang["Settings_Header_GeneralTools"]</h2>
            <p>@Lang["Settings_CurrentLocation", new { path = SteamSettings.FolderPath }]</p>
            <div class="buttoncol"><button id="Steam_PickFolder" type="button" @onclick="PickFolder"><span>@Lang["Settings_PickFolder", new { platform = Platform }]</span></button><button id="Steam_CheckVAC" type="button" @onclick="ClearVacStatus"><span>@Lang["Steam_CheckVac"]</span></button></div>
            <div class="buttoncol"><button id="Steam_ResetSettings" type="button" @onclick="ClearSettings"><span>@Lang["Button_ResetSettings"]</span></button><button id="Steam_ResetImages" type="button" @onclick="ClearImages"><span>@Lang["Button_RefreshImages"]</span></button></div>


            <h2 class="SettingsHeader">@Lang["Settings_Header_BackupRestore"]</h2>

            <div class="buttoncol">
                <button id="Steam_Backup" type="button" @onclick="() => BackupButton()" data-toggle="tooltip" title="@(Lang["Tooltip_Backup"])" data-placement="bottom"><span>@Lang["Button_Backup"]</span></button>
                <button id="Steam_BackupEverything" type="button" @onclick="() => BackupButton(true)" data-toggle="tooltip" title="@(Lang["Tooltip_BackupAll"])" data-placement="bottom"><span>@Lang["Button_BackupAll"]</span></button>
            </div>
            <div class="buttoncol">
                <button id="Steam_OpenBackupFolder" type="button" @onclick="OpenBackupFolder"><span>@Lang["Button_OpenBackup"]</span></button>
                <div class="button" id="Restore" type="button" data-toggle="tooltip" title="@(Lang["Tooltip_Restore"])" data-placement="bottom">
                    <InputFile OnChange="@RestoreFile"/>
                    <span>@Lang["Button_Restore"]</span>
                </div>
            </div>


            <h2 class="SettingsHeader">@Lang["Settings_Header_OtherTools"]</h2>
            <div class="buttoncol"><button id="OpenFolder" type="button" @onclick="() => AppState.OpenFolder(SteamSettings.FolderPath)"><span>@Lang["Settings_OpenFolder", new { platform = Platform }]</span></button><button id="Steam_AdvancedClearing" type="button" @onclick='() => NavManager.NavigateTo("/Steam/AdvancedClearing")'><span>@Lang["Button_AdvancedCleaning"]</span></button></div>
            <div class="buttoncol col_close"><button class="btn_close" type="button" @onclick="SaveAndClose"><span>@Lang["Button_Close"]</span></button></div>

            @if (_gamesAndSettings.Count > 0)
            {
                <h2 class="SettingsHeader">@Lang["Settings_Header_GameStats"]</h2>
                <p>@Lang["Settings_GameStats"]</p>
                @foreach (var (game, settings) in _gamesAndSettings)
                {
                    <h3 class="SettingsHeader">@game</h3>
                @*@foreach (var (metricId, (hidden, metricText)) in settings)*@
                    @foreach (var (metricId, metricText) in settings)
                    {
                        <div class="form-check mb-2">
                            @*<input class="form-check-input @BasicStats.Instance.GetGameIdFromName(game)_Checkboxes" @bind="AppSettings.GloballyHiddenMetrics[game]." type="checkbox" id="@metricId" checked="@hidden"><label class="form-check-label" for="@metricId"></label><label for="@metricId">@metricText<br></label>*@
                            <input class="form-check-input" @bind="WindowSettings.GloballyHiddenMetrics[game][metricId]" type="checkbox" id="@metricId"><label class="form-check-label" for="@metricId"></label><label for="@metricId">@metricText<br></label>
                        </div>
                    }
                }
                <div class="buttoncol col_close"><button class="btn_close" type="button" @onclick="SaveAndClose"><span>@Lang["Button_Close"]</span></button></div>
            }

            <SharedSettings />
            <div class="buttoncol col_close"><button class="btn_close" type="button" @onclick="SaveAndClose"><span>@Lang["Button_Close"]</span></button></div>
        </div>
    </div>
</div>
<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code
{
    protected override async Task OnParametersSetAsync()
    {
        await BasicStats.SetCurrentPlatform("Steam");
    }

    public string StateToString(int state)
    {
        return state switch
        {
            -1 => Lang["NoDefault"],
            0 => Lang["Offline"],
            1 => Lang["Online"],
            2 => Lang["Busy"],
            3 => Lang["Away"],
            4 => Lang["Snooze"],
            5 => Lang["LookingToTrade"],
            6 => Lang["LookingToPlay"],
            7 => Lang["Invisible"],
            _ => ""
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        AppStats.NewNavigation("/Steam/Settings");
        if (!firstRender) return;
        _selectedState = StateToString(SteamSettings.OverrideState);
        await JsRuntime.InvokeVoidAsync("initSavingHotKey");
    }

    public void SaveAndClose()
    {
        WindowSettings.Save();
        SteamSettings.Save();

        NavManager.NavigateTo("/Steam");
    }

    private string _selectedState;
    private Task DefaultState(int state)
    {
        SteamSettings.OverrideState = state;
        _selectedState = StateToString(state);
        return Task.CompletedTask;
    }

    private void OpenBackupFolder()
    {
        if (Directory.Exists("Backups"))
            Process.Start("explorer.exe", Path.GetFullPath("Backups"));
    }

    private readonly Dictionary<string, string> _backupPaths = new()
    {
        { "%Platform_Folder%\\config", "config" },
        { "%Platform_Folder%\\userdata", "userdata" }
    };

    private readonly List<string> _backupFileTypesInclude = new()
    {
        ".cfg", ".ini", ".dat", ".db", ".json", ".ProfileData", ".sav", ".save", ".nfo",".txt", ".vcfg", ".vdf", ".vdf_last", ".vrmanifest", ".xml"
    };

    private static bool _currentlyBackingUp;

    /// <summary>
    /// Backs up platform folders, settings, etc - as defined in the platform settings json
    /// </summary>
    private void BackupButton(bool everything = false)
    {
        if (!_currentlyBackingUp)
            _currentlyBackingUp = true;
        else
            AppState.Toasts.ShowToastLang(ToastType.Error, "Toast_BackupBusy");

        // Let user know it's copying files to a temp location
        AppState.Toasts.ShowToastLang(ToastType.Info, "Toast_BackupCopy");

        // Generate temporary folder:
        var tempFolder = $"BackupTemp\\Backup_Steam_{DateTime.Now:dd-MM-yyyy_hh-mm-ss}";
        Directory.CreateDirectory("BackupTemp");
        Directory.CreateDirectory("Backups");
        Directory.CreateDirectory(tempFolder);

        if (!everything)
            foreach (var (f, t) in _backupPaths)
            {
                var fExpanded = f.Replace("%Platform_Folder%", SteamSettings.FolderPath);
                if (!Directory.Exists(fExpanded)) continue;
                Globals.CopyFilesRecursive(fExpanded, Path.Join(tempFolder, t), true, _backupFileTypesInclude, true);
            }
        else
            foreach (var (f, t) in _backupPaths)
            {
                var fExpanded = f.Replace("%Platform_Folder%", SteamSettings.FolderPath);
                if (!Directory.Exists(fExpanded)) continue;
                if (!Globals.CopyFilesRecursive(fExpanded ,Path.Join(tempFolder, t)))
                    AppState.Toasts.ShowToastLang(ToastType.Error, "Toast_FileCopyFail");
            }

        var backupThread = new Thread(() => FinishBackup(tempFolder));
        backupThread.Start();
    }

    /// <summary>
    /// Runs async so the previous function can return, and an error isn't thrown with the Blazor function timeout
    /// </summary>
    private void FinishBackup(string tempFolder)
    {
        var folderSize = Globals.FolderSizeString(tempFolder);
        AppState.Toasts.ShowToastLang(ToastType.Info, new LangSub("Toast_BackupCompress", new {size = folderSize}), 3000);

        var zipFile = Path.Join("Backups", tempFolder.Split(Path.DirectorySeparatorChar).Last() + ".7z");
        Directory.CreateDirectory("Backups");

        var backupWatcher = new Thread(() => CompressionUpdater(zipFile));
        backupWatcher.Start();

        Globals.CompressFolder(tempFolder, zipFile);

        Globals.RecursiveDelete(tempFolder, false);
        if (File.Exists(zipFile))
            AppState.Toasts.ShowToastLang(ToastType.Success, new LangSub("Toast_BackupComplete", new {size = folderSize, compressedSize = Globals.FileSizeString(zipFile)}));
        else
        {
            Globals.WriteToLog($"ERROR: Could not find compressed backup file! Expected path: {zipFile}");
            AppState.Toasts.ShowToastLang(ToastType.Error, "Toast_BackupFail");
        }

        _currentlyBackingUp = false;
    }

    /// <summary>
    /// Keeps the user updated with compression progress
    /// </summary>
    private void CompressionUpdater(string zipFile)
    {
        Thread.Sleep(3500);
        while (_currentlyBackingUp)
        {
            AppState.Toasts.ShowToastLang(ToastType.Info, new LangSub("Toast_BackupProgress", new {compressedSize = Globals.FileSizeString(zipFile)}), 1000);
            Thread.Sleep(2000);
        }
    }


    private static bool _currentlyRestoring;
    private void RestoreFile(InputFileChangeEventArgs e)
    {
        if (!_currentlyRestoring)
            _currentlyRestoring = true;
        else
        {
            AppState.Toasts.ShowToastLang(ToastType.Error, "Toast_RestoreBusy");
            return;
        }

        foreach (var file in e.GetMultipleFiles(1))
        {
            try
            {
                if (!file.Name.EndsWith("7z")) continue;

                AppState.Toasts.ShowToastLang(ToastType.Info, "Toast_RestoreExt");

                var outputFolder = Path.Join("Restore", Path.GetFileNameWithoutExtension(file.Name));
                Directory.CreateDirectory(outputFolder);
                var tempFile = Path.Join("Restore", file.Name);

                // Import 7z
                var s = file.OpenReadStream(4294967296); // 4 GB as bytes
                var fs = File.Create(tempFile);
                s.CopyTo(fs);
                fs.Close();

                // Decompress and remove temp file
                Globals.DecompressZip(tempFile, outputFolder);
                File.Delete(tempFile);

                AppState.Toasts.ShowToastLang(ToastType.Info, "Toast_RestoreCopying");

                // Move files and folders back
                foreach (var (toPath, fromPath)in _backupPaths)
                {
                    var fullFromPath = Path.Join(outputFolder, fromPath);
                    if (Globals.IsFile(fullFromPath))
                        Globals.CopyFile(fullFromPath, toPath);
                    else if (Globals.IsFolder(fullFromPath) && !Globals.CopyFilesRecursive(fullFromPath, toPath))
                        AppState.Toasts.ShowToastLang(ToastType.Error, "Toast_FileCopyFail");
                }

                AppState.Toasts.ShowToastLang(ToastType.Info, "Toast_RestoreDeleting");

                // Remove temp files
                Globals.RecursiveDelete(outputFolder, false);

                AppState.Toasts.ShowToastLang(ToastType.Success, "Toast_RestoreComplete");
            }
            catch (Exception ex)
            {
                Globals.WriteToLog("Failed to restore from file: " + file.Name, ex);
                AppState.Toasts.ShowToastLang(ToastType.Error, "Status_FailedLog");

            }
            _currentlyRestoring = false;
        }
    }
}
