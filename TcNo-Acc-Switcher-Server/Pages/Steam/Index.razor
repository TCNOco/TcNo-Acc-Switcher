@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@page "/Steam/"
@using TcNo_Acc_Switcher_Server.Data
@using TcNo_Acc_Switcher_Server.Data.Settings
@using TcNo_Acc_Switcher_Server.Pages.General
@using System.IO
@using TcNo_Acc_Switcher_Server.Shared.Accounts
@using TcNo_Acc_Switcher_Server.Shared.ContextMenu
@inject AppData AData
@inject IJSRuntime JsRuntime
@{ AData.SetActiveIJsRuntime(JsRuntime); }
@inject NavigationManager NavManager
@{ AData.SetActiveNavMan(NavManager); }

<style>@(AppSettings.GetCssBlock())</style>
<style>@(Steam.GetSteamIdCssBlock())</style>
@inject Lang Locale
<ContextMenu MenuItems="@Steam.Menu" ContextMenuId="AccOrPlatList" @ref="SteamContextMenu" />
<ContextMenu MenuItems="@Basic.ContextMenuShortcutItems" ContextMenuId="Shortcuts" />
<ContextMenu MenuItems="@Basic.ContextMenuPlatformItems" ContextMenuId="Platform" />
<AccountList AccountItems="@AppData.SteamAccounts" @ref="SteamAccountList" />

<div class="shortcutDropdown gameShortcuts" id="shortcutDropdown" style="display: none">
    <div class="shortcutDropdownItems">
        @foreach (var (i, shortcut) in Steam.Shortcuts)
        {
            @if (i >= 0)
            {
                <button class="HasContextMenu" id="@(shortcut)" @onclick='() => Basic.RunShortcut(shortcut, "LoginCache\\Steam\\Shortcuts", platform: "Steam")' data-toggle="tooltip" title="@(PlatformFuncs.RemoveShortcutExt(shortcut))">
                    <img src="@(Steam.GetShortcutImagePath(shortcut))" alt="@(shortcut[0])"/>
                </button>
            }
        }
    </div>
    <button id="btnOpenShortcutFolder" @onclick="() => Basic.OpenFolder(Path.GetFullPath(Steam.ShortcutFolder))" data-toggle="tooltip" title="@(Locale["Tooltip_ShortcutFolder"])" data-placement="right"><i class="fas fa-plus"></i></button>
</div>

<div class="acc_list_actionbar">
    <div class="statusBar"><div></div><input id="CurrentStatus" @bind="AppData.CurrentStatus" spellcheck="false" disabled></div>
    <div class="gameShortcuts">
        <div class="shortcuts">
            @foreach (var (i, shortcut) in Steam.Shortcuts)
            {
                @if (i < 0)
                {
                    <button class="HasContextMenu" id="@(shortcut)" @onclick='() => Basic.RunShortcut(shortcut, "LoginCache\\Steam\\Shortcuts", platform: "Steam")' data-toggle="tooltip" title="@(PlatformFuncs.RemoveShortcutExt(shortcut))">
                        <img src="@(Steam.GetShortcutImagePath(shortcut))" alt="@(shortcut[0])"/>
                    </button>
                }
            }
        </div>
        <button id="shortcutDropdownBtn" onclick="shortcutDropdownBtnClick()" data-toggle="tooltip" title="@(Locale["Tooltip_ExpandShortcuts"])" data-placement="right"><i class="fas fa-chevron-up"></i></button>

        <button id="btnStartPlat" @onclick='() => Basic.RunPlatform(Steam.Exe(), Steam.Admin, "", "Steam", Steam.StartingMethod)' data-toggle="tooltip" title="Steam">
            <img src="@(Steam.GetShortcutImagePath("Steam"))" alt="Start platform"/>
        </button>

        <button id="btnAddNew" @onclick="() => AppFuncs.SwapToNewAccount()">
            <i class="fas fa-plus footerIcoInline"></i>
            <span>@Locale["Button_AddNew"]</span>
        </button>
        <button class="btn_login" id="btnLogin" @onclick="() => AppFuncs.SwapToAccount()">
            <span>@Locale["Button_Login"]</span>
            <i class="fas fa-caret-right footerIcoInline"></i>
        </button>

        <button class="btnSettings" onclick="location = 'Steam/Settings'" data-toggle="tooltip" title="@(Locale["Tooltip_Settings"])">
            <i class="fas fa-cog footerIcoSettings"></i>
        </button>
        <button class="btnHelp" onclick="showModal('info');" data-toggle="tooltip" title="@(Locale["Tooltip_Info"])">
            <i class="fas fa-question footerIcoQuestion"></i>
        </button>
    </div>

</div>


@code
{
    public static AccountList SteamAccountList;

    public static ContextMenu SteamContextMenu;

    protected override void OnInitialized()
    {
        AppData.Instance.OnChange += OnChangeHandler;
    }
    private async void OnChangeHandler()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AppData.Instance.OnChange -= OnChangeHandler;
    }

    // This has to be here for NavManager.
    // This is run before everything is painted on, so that it can get the correct values for the CSS Block.
    protected override async Task OnParametersSetAsync()
    {
        AppSettings.StreamerModeCheck();
        await BasicStats.SetCurrentPlatform("Steam");
        //var f = AppSettings.UsingTcNoBrowser;
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender) => await GeneralFuncs.HandleFirstRender(firstRender, "Steam");
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GeneralFuncs.HandleFirstRender(firstRender, "Steam");
        AppStats.NewNavigation("/Steam/");
        if (!firstRender) return;
        await AppData.InvokeVoidAsync("initCopyHotKey");
        await AppData.InvokeVoidAsync("showNoteTooltips");

        var curAcc = SteamSwitcherFuncs.GetCurrentAccountId(true);
        if (curAcc != "") await AccountFuncs.SetCurrentAccount(curAcc);

        AppData.FirstLaunchCheck();
    }
}
