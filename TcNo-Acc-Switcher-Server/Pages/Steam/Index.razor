@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@page "/Steam/"
@using System.IO
@using Gameloop.Vdf
@using Gameloop.Vdf.JsonConverter
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.WebUtilities
@using Newtonsoft.Json.Linq
@using TcNo_Acc_Switcher_Globals
@using TcNo_Acc_Switcher_Server.Converters
@using TcNo_Acc_Switcher_Server.Pages.General
@using TcNo_Acc_Switcher_Server.Shared.Accounts
@using TcNo_Acc_Switcher_Server.Shared.ContextMenu
@using TcNo_Acc_Switcher_Server.State.DataTypes
@using TcNo_Acc_Switcher_Server.State.Interfaces
@using TcNo_Acc_Switcher_Server.Shared.Tooltip
@using TcNo_Acc_Switcher_Server.State.Classes
@using TcNo_Acc_Switcher_Server.Shared.SwitcherUI
@using System.ComponentModel
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IAppState AppState
@inject ISteamState SteamState
@inject ISteamFuncs SteamFuncs
@inject ISteamSettings SteamSettings
@inject IModals Modals
@inject ILang Lang
@inject IStatistics Statistics
@inject ISharedFunctions SharedFunctions
@inject IGameStats GameStats
@inject IToasts Toasts
@inject IWindowSettings WindowSettings

<ContextMenu MenuItems="@SteamState.ContextMenu.Menu" ContextMenuId="AccOrPlatList" />
<ContextMenu MenuItems="@SteamState.ContextMenu.ShortcutItems" ContextMenuId="Shortcuts" />
<ContextMenu MenuItems="@SteamState.ContextMenu.PlatformItems" ContextMenuId="Platform" />
<AccountList AccountItems="@AppState.Switcher.SteamAccounts" AccountActions="_accountActions" />

<div class="shortcutDropdown gameShortcuts" id="shortcutDropdown" style="display: none">
    <div class="shortcutDropdownItems">
        @foreach (var (i, shortcut) in _shortcuts)
        {
            @if (i >= 0)
            {
                <button class="HasContextMenu" id="@(shortcut)" @onclick="(e) => ShortcutClick(e, shortcut)" @onmouseup="(e) => ShortcutClick(e, shortcut)" @onmouseover="() => AppState.Switcher.CurrentStatus = Globals.RemoveShortcutExt(shortcut)" oncontextmenu="return false;">
                    <img src="@(GetShortcutImagePath(shortcut))" alt="@(shortcut[0])"/>
                </button>
            }
        }
    </div>
    <Tooltip Text="@(Lang["Tooltip_ShortcutFolder"])" Id="btnOpenShortcutFolder">
        <button @onclick='() => AppState.OpenFolder(Path.GetFullPath("LoginCache\\Steam\\Shortcuts\\"))'><i class="fas fa-plus"></i></button>
    </Tooltip>
</div>

<div class="acc_list_actionbar">
    <StatusBar />
    <div class="gameShortcuts">
        <div class="shortcuts">
            @foreach (var (i, shortcut) in _shortcuts)
            {
                @if (i < 0)
                {
                    <Tooltip Text="@Globals.RemoveShortcutExt(shortcut)">
                        <button class="HasContextMenu" id="@(shortcut)" @onclick="(e) => ShortcutClick(e, shortcut)" @onmouseup="(e) => ShortcutClick(e, shortcut)" oncontextmenu="return false;">
                            <img src="@(GetShortcutImagePath(shortcut))" alt="@(shortcut[0])"/>
                        </button>
                    </Tooltip>
                }
            }
        </div>
        <Tooltip Text="@(Lang["Tooltip_ExpandShortcuts"])">
            <button id="shortcutDropdownBtn" onclick="shortcutDropdownBtnClick()"><i class="fas fa-chevron-up"></i></button>
        </Tooltip>

        <Tooltip Text="Steam">
            <button id="btnStartPlat" @onmousedown="RunSteam" oncontextmenu="return false;">
                <img src="@(GetShortcutImagePath("Steam"))" alt="RUN"/>
            </button>
        </Tooltip>

        <button id="btnAddNew" @onclick="() => SteamFuncs.SwapToNewAccount(JsRuntime)">
            <i class="fas fa-plus footerIcoInline"></i>
            <span>@Lang["Button_AddNew"]</span>
        </button>
        <button class="btn_login" id="btnLogin" @onclick="() => SteamFuncs.SwapToAccount(JsRuntime)">
            <span>@Lang["Button_Login"]</span>
            <i class="fas fa-caret-right footerIcoInline"></i>
        </button>

        <Tooltip Text="@(Lang["Tooltip_Settings"])">
            <button class="btnSettings" @onclick='() => NavigationManager.NavigateTo("/Steam/Settings/")'>
                <i class="fas fa-cog footerIcoSettings"></i>
            </button>
        </Tooltip>

        <Tooltip Text="@(Lang["Tooltip_Info"])">
            <button class="btnHelp" @onclick='() => Modals.ShowModal("info")'>
                <i class="fas fa-question footerIcoQuestion"></i>
            </button>
        </Tooltip>
    </div>

</div>


@code
{
    private readonly AccountActions _accountActions = new();
    private Dictionary<int, string> _shortcuts = new();

    public static string GetShortcutImagePath(string gameShortcutName) =>
        Path.Join("img\\shortcuts\\Steam\\", Globals.RemoveShortcutExt(gameShortcutName) + ".png");

    public void Dispose()
    {
        //AppData.Instance.OnChange -= OnChangeHandler;
    }

    // This has to be here for NavManager.
    // This is run before everything is painted on, so that it can get the correct values for the CSS Block.
    protected override async Task OnParametersSetAsync()
    {
        AppState.Stylesheet.StreamerModeCheck();
        await GameStats.SetCurrentPlatform("Steam");
        //var f = WindowSettings.UsingTcNoBrowser;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        AppState.WindowState.WindowTitle = Lang["Title_AccountsList", new { platform = "Steam" }];
        AppState.Switcher.CurrentStatus = Lang["Loading"];
        // Handle Streamer Mode notification
        if (WindowSettings.StreamerModeEnabled && AppState.Stylesheet.StreamerModeTriggered)
            await Toasts.ShowToastLangAsync(ToastType.Info, "Toast_StreamerModeTitle", "Toast_StreamerModeHint");

        Statistics.NewNavigation("/Steam/");

        StaticFuncs.SaveShortcuts = SaveShortcuts;
        _shortcuts = SteamSettings.Shortcuts;
        StaticFuncs.SaveOrderAction = SteamState.SaveAccountOrder;

        await SteamState.LoadSteamState(SteamFuncs, JsRuntime);
        await InvokeAsync(StateHasChanged);

        // Get logged in user from Steam loginusers.vdf. This is only set once, on launch.
        var curAcc = SteamState.SteamUsers.FirstOrDefault(x => x.MostRec == "1");
        if (curAcc is not null) SteamFuncs.SetCurrentAccount(curAcc.SteamId);

        // Load games for the Right-click menu
        LoadGamesForAccounts();
        _accountActions.AfterAccountSelect = OnAccountSelect;
        await InvokeAsync(StateHasChanged);

        AppState.Switcher.CurrentStatus = Lang["Done"];
    }

    private async Task ShortcutClick(MouseEventArgs e, string shortcut)
    {
        switch (e.Button)
        {
            case 0 when e.Type == "click":
                // Left click
                SharedFunctions.RunShortcut(shortcut, "LoginCache\\Steam\\Shortcuts", "Steam");
                break;
            case 2:
                // Right click
                AppState.Switcher.CurrentShortcut = shortcut;
                await JsRuntime.InvokeVoidAsync("positionAndShowMenu", e, "#Shortcuts");
                break;
        }
    }

    private async Task RunSteam(MouseEventArgs e)
    {
        switch (e.Button)
        {
            case 0:
                // Left click
                SteamState.RunSteam(SteamSettings.Admin, "");
                break;
            case 2:
                // Right click
                await JsRuntime.InvokeVoidAsync("positionAndShowMenu", e, "#Platform");
                break;
        }
    }

    // Allow saving of shortcut position.
    // This has to be done as only Static funcs can be invoked by JS.
    // Do not update the list used on the page. It gets a little confused.
    private void SaveShortcuts(Dictionary<int, string> o)
    {
        SteamSettings.Shortcuts = o;
        SteamSettings.Save();
    }


    #region Switch and Play
    /// <summary>
    /// Iterates through each folder in Steam\\userdata, to collect a list of all of their game Ids.
    /// </summary>
    public void LoadGamesForAccounts()
    {
        var userDataFolder = Path.Join(SteamSettings.FolderPath, $"userdata\\");
        if (!Directory.Exists(userDataFolder)) return;
        foreach (var dir in Directory.GetDirectories(userDataFolder))
        {
            LoadGamesListForAccount(Path.GetFileName(dir));
        }
    }

    /// <summary>
    /// Loads list of AppIds and AppNames for games installed on X account.
    /// These are then placed in as: _appState.Switcher.SteamAccounts.Games
    /// This should ONLY be run AFTER the contextmenu was init. This is because the list of AppIds is useless without names for each.
    /// </summary>
    public void LoadGamesListForAccount(string steamId)
    {
        try
        {
            var steamIdConverter = new SteamIdConvert(steamId);
            var steamId64 = steamIdConverter.Id64;

            // Check if user is loaded.
            var user = SteamState.SteamUsers.FirstOrDefault(x => x.SteamId == steamId64);
            if (user is null) return;

            // Check if config file exists
            var configVdfPath = Path.Join(SteamSettings.FolderPath, $"userdata\\{steamIdConverter.Id32}\\config\\localconfig.vdf");
            if (!File.Exists(configVdfPath)) return;

            // Load games into memory for account.
            var configVdf = VdfConvert.Deserialize(File.ReadAllText(configVdfPath), new VdfSerializerSettings() { UsesEscapeSequences = true, MaximumTokenSize = 5000 });
            var config = new JObject { configVdf.ToJson() };
            var appsArray = config.SelectToken("UserLocalConfigStore.Software.valve.steam.apps");
            if (appsArray == null) return;

            var menuItems = new List<MenuItem>();

            foreach (var appJToken in appsArray)
            {
                var appId = ((JProperty)appJToken).Name;
                var appName = SteamState.AppIds.ContainsKey(appId) ? SteamState.AppIds[appId] : appId;
                if (!SteamState.InstalledGames.Contains(appId)) continue;

                user.AppIds.Add(appId, appName);

                menuItems.Add(new MenuItem
                {
                    Text = appName,
                    MenuAction = async () => await SteamFuncs.SwitchAndLaunch(JsRuntime, appId)
                });
            }

            // Sort alphabetically
            menuItems.Sort((x, y) => string.Compare(x.Text, y.Text, StringComparison.Ordinal));

            if (menuItems.Count > 0)
                user.SwitchAndLaunch = new MenuItem()
                {
                    Text = Lang["Context_SwitchAndLaunch"],
                    Id = "SwitchAndLaunch",
                    Children = menuItems
                };
            else user.SwitchAndLaunch = null;
        }
        catch (Exception e)
        {
            Globals.WriteToLog("ERROR: Could not fetch list of Steam games for account.", e);
        }
    }

    /// <summary>
    /// Add switch and launch functionality
    /// </summary>
    /// <param name="acc"></param>
    public void OnAccountSelect(Account acc)
    {
        // Remove section from contextmenu
        SteamState.ContextMenu.Menu.Remove(SteamState.ContextMenu.Menu.FirstOrDefault(x => x.Id == "SwitchAndLaunch")); // This can be null.
        var switchAndLaunch = SteamState.SteamUsers.FirstOrDefault(x => x.SteamId == acc.AccountId)?.SwitchAndLaunch;
        if (switchAndLaunch is not null) SteamState.ContextMenu.Menu.Add(switchAndLaunch);
    }
    #endregion

}
