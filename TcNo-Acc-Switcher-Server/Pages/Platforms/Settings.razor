@*TcNo Account Switcher - A Super fast account switcher
    Copyright (C) 2019-2022 TechNobo (Wesley Pyburn)
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses />.*@

@page "/Platforms/"
@using TcNo_Acc_Switcher_Server.State.Interfaces
@using TcNo_Acc_Switcher_Server.State.Classes
@using TcNo_Acc_Switcher_Globals
@using System.Collections.Specialized
@namespace TcNo_Acc_Switcher_Server.Pages.Platforms
@inject NavigationManager NavManager
@inject IAppState AppState
@inject ILang Lang
@inject IWindowSettings WindowSettings
@implements IDisposable

<div class="container mainblock">
    <div class="row">
        <div class="col-md-12 col-lg-9 col-xl-8 mx-auto settingsCol">
            <toastarea class="toastarea" />

            @if (WindowSettings.Platforms.All(x => !x.Enabled))
            {
                <span>@Lang["Settings_NoPlatforms"]</span>

                <div class="SettingsHeader mt-4"> <!-- I couldn't just include the opening tag here, so copy/paste everything... -->
                    <hr><span>@Lang["Settings_Header_ExtraPlatforms"]</span>
                    <hr>
                </div>
            }
            else
            {
                <h2 class="SettingsHeader">@Lang["Settings_Header_ExtraPlatforms"]</h2>
            }

            @if (WindowSettings.Platforms.Any(x => !x.Enabled))
            {
                <h2 class="SettingsHeader">@Lang["Settings_ExtraPlatformsDisabled"]</h2>

                <div class="rowSetting">
                    @foreach (var item in WindowSettings.Platforms.Where(x => !x.Enabled))
                    {
                        <div class="form-check mb-2" @onclick="() => ToggleItem(item, true)">
                            <input class="form-check-input" type="checkbox" id="@item.NameNoSpace" @bind="item.Enabled">
                            <label class="form-check-label" for="@item.NameNoSpace"></label>
                            <label for="@item.NameNoSpace">@item.Name<br></label>
                        </div>
                    }
                </div>
            }

            @if (WindowSettings.Platforms.Any(x => x.Enabled)) {
                <div class="SettingsHeader mt-2">
                    <p>@Lang["Settings_ExtraPlatformsEnabled"]</p>
                </div>

                <div class="rowSetting">
                    @foreach (var item in WindowSettings.Platforms.Where(x => x.Enabled))
                    {
                        <div class="form-check mb-2" @onclick="() => ToggleItem(item, false)">
                            <input class="form-check-input" type="checkbox" id="@item.NameNoSpace" @bind="item.Enabled">
                            <label class="form-check-label" for="@item.NameNoSpace"></label>
                            <label for="@item.NameNoSpace">@item.Name<br></label>
                        </div>
                    }
                </div>

                <div class="buttoncol col_close"><button class="btn_close" type="button" @onclick="SaveAndClose"><span>@Lang["Button_Close"]</span></button></div>
            }
        </div>
    </div>
</div>
<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code
{
    private void ToggleItem(PlatformItem item, bool enabled)
    {
        WindowSettings.Platforms.First(x => x == item).SetEnabled(enabled);
        WindowSettings.Platforms.Sort();
    }

    private NotifyCollectionChangedEventHandler _collectionChanged;
    protected override void OnInitialized()
    {
        AppState.WindowState.WindowTitle = Lang["Title_Platforms_Settings"];
        _collectionChanged = async (_, _) => await InvokeAsync(StateHasChanged);
        WindowSettings.Platforms.CollectionChanged += _collectionChanged;
    }

    void IDisposable.Dispose()
    {
        WindowSettings.Platforms.CollectionChanged -= _collectionChanged;
    }

    public void SaveAndClose()
    {
        WindowSettings.Save();
        NavManager.NavigateTo("/");
    }

    /// <summary>
    /// Show a platform. This is only called from the platforms list.
    /// </summary>
    public void ShowPlatform(string platform)
    {
        WindowSettings.Platforms.First(x => x.Name == platform).SetEnabled(true);
        WindowSettings.Platforms.Sort();
    }
}
